// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: noted/language/v1/language.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LanguageAPIClient is the client API for LanguageAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LanguageAPIClient interface {
	ExtractKeywords(ctx context.Context, in *ExtractKeywordsRequest, opts ...grpc.CallOption) (*ExtractKeywordsResponse, error)
	ExtractKeywordsBatch(ctx context.Context, in *ExtractKeywordsBatchRequest, opts ...grpc.CallOption) (*ExtractKeywordsBatchResponse, error)
	Summarize(ctx context.Context, in *SummarizeRequest, opts ...grpc.CallOption) (*SummarizeResponse, error)
}

type languageAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewLanguageAPIClient(cc grpc.ClientConnInterface) LanguageAPIClient {
	return &languageAPIClient{cc}
}

func (c *languageAPIClient) ExtractKeywords(ctx context.Context, in *ExtractKeywordsRequest, opts ...grpc.CallOption) (*ExtractKeywordsResponse, error) {
	out := new(ExtractKeywordsResponse)
	err := c.cc.Invoke(ctx, "/noted.language.v1.LanguageAPI/ExtractKeywords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *languageAPIClient) ExtractKeywordsBatch(ctx context.Context, in *ExtractKeywordsBatchRequest, opts ...grpc.CallOption) (*ExtractKeywordsBatchResponse, error) {
	out := new(ExtractKeywordsBatchResponse)
	err := c.cc.Invoke(ctx, "/noted.language.v1.LanguageAPI/ExtractKeywordsBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *languageAPIClient) Summarize(ctx context.Context, in *SummarizeRequest, opts ...grpc.CallOption) (*SummarizeResponse, error) {
	out := new(SummarizeResponse)
	err := c.cc.Invoke(ctx, "/noted.language.v1.LanguageAPI/Summarize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LanguageAPIServer is the server API for LanguageAPI service.
// All implementations must embed UnimplementedLanguageAPIServer
// for forward compatibility
type LanguageAPIServer interface {
	ExtractKeywords(context.Context, *ExtractKeywordsRequest) (*ExtractKeywordsResponse, error)
	ExtractKeywordsBatch(context.Context, *ExtractKeywordsBatchRequest) (*ExtractKeywordsBatchResponse, error)
	Summarize(context.Context, *SummarizeRequest) (*SummarizeResponse, error)
	mustEmbedUnimplementedLanguageAPIServer()
}

// UnimplementedLanguageAPIServer must be embedded to have forward compatible implementations.
type UnimplementedLanguageAPIServer struct {
}

func (UnimplementedLanguageAPIServer) ExtractKeywords(context.Context, *ExtractKeywordsRequest) (*ExtractKeywordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExtractKeywords not implemented")
}
func (UnimplementedLanguageAPIServer) ExtractKeywordsBatch(context.Context, *ExtractKeywordsBatchRequest) (*ExtractKeywordsBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExtractKeywordsBatch not implemented")
}
func (UnimplementedLanguageAPIServer) Summarize(context.Context, *SummarizeRequest) (*SummarizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Summarize not implemented")
}
func (UnimplementedLanguageAPIServer) mustEmbedUnimplementedLanguageAPIServer() {}

// UnsafeLanguageAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LanguageAPIServer will
// result in compilation errors.
type UnsafeLanguageAPIServer interface {
	mustEmbedUnimplementedLanguageAPIServer()
}

func RegisterLanguageAPIServer(s grpc.ServiceRegistrar, srv LanguageAPIServer) {
	s.RegisterService(&LanguageAPI_ServiceDesc, srv)
}

func _LanguageAPI_ExtractKeywords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtractKeywordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LanguageAPIServer).ExtractKeywords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noted.language.v1.LanguageAPI/ExtractKeywords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LanguageAPIServer).ExtractKeywords(ctx, req.(*ExtractKeywordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LanguageAPI_ExtractKeywordsBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtractKeywordsBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LanguageAPIServer).ExtractKeywordsBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noted.language.v1.LanguageAPI/ExtractKeywordsBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LanguageAPIServer).ExtractKeywordsBatch(ctx, req.(*ExtractKeywordsBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LanguageAPI_Summarize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SummarizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LanguageAPIServer).Summarize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noted.language.v1.LanguageAPI/Summarize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LanguageAPIServer).Summarize(ctx, req.(*SummarizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LanguageAPI_ServiceDesc is the grpc.ServiceDesc for LanguageAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LanguageAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "noted.language.v1.LanguageAPI",
	HandlerType: (*LanguageAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExtractKeywords",
			Handler:    _LanguageAPI_ExtractKeywords_Handler,
		},
		{
			MethodName: "ExtractKeywordsBatch",
			Handler:    _LanguageAPI_ExtractKeywordsBatch_Handler,
		},
		{
			MethodName: "Summarize",
			Handler:    _LanguageAPI_Summarize_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "noted/language/v1/language.proto",
}
