syntax = "proto3";

package noted.accounts.v1;

option go_package = "noted/accounts/v1";

import "google/protobuf/timestamp.proto";

// ConversationMessage is the representation of a chat message within
// a conversation (in which conversation is it stored, who write it,
// content and creation date)
message ConversationMessage {
    string id = 1;
    string conversation_id = 2;
    string sender_account_id = 3;
    string content = 4;
    google.protobuf.Timestamp created_at = 5;
}

// Conversation represents a chat conversation between members of a group.
message Conversation {
    string id = 1;
    // Conversations are bound to groups.
    string group_id = 2;
    string title = 3;
}

service ConversationsAPI {
    // Internal endpoint. Invoked upon group creation.
    rpc CreateConversation(CreateConversationRequest) returns (CreateConversationResponse) {}
    // Must be group member.
    rpc UpdateConversation(UpdateConversationRequest) returns (UpdateConversationResponse) {}
    rpc SendConversationMessage(SendConversationMessageRequest) returns (SendConversationMessageResponse) {}
    // Must be sender or group admin.
    rpc DeleteConversationMessage(DeleteConversationMessageRequest) returns (DeleteConversationMessageResponse) {}
    // Must be group member.
    rpc GetConversationMessage(GetConversationMessageRequest) returns (GetConversationMessageResponse) {}
    rpc UpdateConversationMessage(UpdateConversationMessageRequest) returns (UpdateConversationMessageResponse) {}
    // Must be group member.
    rpc ListConversationMessages(ListConversationMessagesRequest) returns (ListConversationMessagesResponse) {}
    rpc ListConversations(ListConversationsRequest) returns (ListConversationsResponse) {}
}

message CreateConversationRequest {
    string group_id = 1;
    string title = 2;
}

message CreateConversationResponse {
    Conversation conversation = 1;
}

message UpdateConversationRequest {
    string conversation_id = 1;
    string title = 2;
}

message UpdateConversationResponse {
    Conversation conversation = 1;
}

message SendConversationMessageRequest {
    string conversation_id = 1;
    string content = 2;
}

message SendConversationMessageResponse {
    ConversationMessage message = 1;
}

message DeleteConversationMessageRequest {
    string conversation_id = 1;
    string message_id = 2;
}

message DeleteConversationMessageResponse {
}

message GetConversationMessageRequest {
    string conversation_id = 1;
    string message_id = 2;
}

message GetConversationMessageResponse {
    ConversationMessage message = 1;
}

message UpdateConversationMessageRequest {
    string conversation_id = 1;
    string content = 1;
}

message UpdateConversationMessageResponse {
    ConversationMessage message = 1;
}

message ListConversationMessagesRequest {
    string conversation_id = 1;
    // (Optional) Filter messages by sender. 
    string sender_account_id = 2;
    // TODO: Change to `sort` enum.
    string chronological = 3;
    // (Optional)
    int32 limit = 4;
    // (Optional)
    int32 offset = 5;
}

message ListConversationMessagesResponse {
    repeated ConversationMessage messages = 1;
}

message ListConversationsRequest {
    string group_id = 1;
}

message ListConversationsResponse {
    repeated Conversation conversations = 1;
}
