syntax = "proto3";

package noted.accounts.v1;

option go_package = "noted/accounts/v1";

import "google/protobuf/timestamp.proto";

// ConversationMessage is the representation of a tchat conversation stored
// in a conversation context (in which conversation is it store, who write it,
// content and creation date)
message ConversationMessage {
    string message_id = 1;
    string conversation_id = 2;
    string author_account_id = 3;
    string content = 4;
    google.protobuf.Timestamp created_at = 5;
}

// Conversation is the representation of a tchat conversation stored
// in a group context (which group, with a title)
message Conversation {
    string conversation_id = 1;
    string folder_id = 2;
    string title = 3;
}

service TchatAPI {
    rpc CreateConversation(CreateConversationRequest) return (CreateConversationResponse) {}
    rpc AddConversationMember(AddConversationMemberRequest) return (AddConversationMemberResponse) {}
    rpc RemoveConversationMember(RemoveConversationMemberRequest) return (RemoveConversationMemberResponse) {}
    rpc SendConversationMessage(SendConversationMessageRequest) return (SendConversationMessageResponse) {}
    rpc DeleteConversationMessage(DeleteConversationMessageRequest) return (DeleteConversationMessageResponse) {}
    rpc GetConversationMessage(GetConversationMessageRequest) return (GetConversationMessageResponse) {}
    rpc ListConversationMessage(ListConversationMessageRequest) return (ListConversationMessageResponse) {}
    rpc ListConversationMember(ListConversationMemberRequest) return (ListConversationMemberResponse) {}
}

message CreateConversationRequest {
    string group_id = 1;
    string title = 2;
}

message CreateConversationResponse {
    Conversation conversation = 1;
}

message AddConversationMemberRequest {
    string member_account_id = 1;
    string conversation_id = 2;
}

message AddConversationMemberResponse {
    // kind of boolean to know if the operation suceed
    // maybe put nothing here
    string member_id = 1;
}

message RemoveConversationMemberRequest {
    string member_account_id = 1;
    string conversation_id = 2;
}

message RemoveConversationMemberResponse {
    // kind of boolean to know if the operation suceed
    // maybe put nothing here
    string member_id = 1;
}

message SendConversationMessageRequest {
    ConversationMessage message = 2;
}

message SendConversationMessageResponse {
    // kind of boolean to know if the operation suceed
    // maybe put nothing here
    string message_id = 1;
}

message DeleteConversationMessageRequest {
    Conversation conversation = 1;
    string message_id = 2;
}

message DeleteConversationMessageResponse {
    // kind of boolean to know if the operation suceed
    // maybe put nothing here
    string message_id = 1;
}

message GetConversationMessageRequest {
    Conversation conversation = 1;
    string message_id = 2;
}

message GetConversationMessageResponse {
    ConversationMessage message = 1;
}

message ListConversationMessageRequest {
    // (optional) if we want only user's messages
    string user_id = 1;
    // (optional) if we want to list by chronological order
    string chronological = 2;
    // (optional) if we want the x last messages
    string limit = 3;
    Conversation conversation = 4;
}

message ListConversationMessageResponse {
    repeated ConversationMessage messages = 1;
}

message ListConversationMemberRequest {
    Conversation conversation = 1;
}

message ListConversationMemberResponse {
    repeated string members_id = 1;
}