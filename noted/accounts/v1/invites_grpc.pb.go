// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InvitesAPIClient is the client API for InvitesAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InvitesAPIClient interface {
	// The sender defaults to the authenticated user. Must be group member.
	SendInvite(ctx context.Context, in *SendInviteRequest, opts ...grpc.CallOption) (*SendInviteResponse, error)
	// Must be group administrator or sender or recipient.
	GetInvite(ctx context.Context, in *GetInviteRequest, opts ...grpc.CallOption) (*GetInviteResponse, error)
	// Must be recipient. Accepting an invitation automatically adds the
	// recipient to the group and deletes the invite.
	AcceptInvite(ctx context.Context, in *AcceptInviteRequest, opts ...grpc.CallOption) (*AcceptInviteResponse, error)
	// Must be recipient. Deletes the invitation without making the
	// recipient join the group.
	DenyInvite(ctx context.Context, in *DenyInviteRequest, opts ...grpc.CallOption) (*DenyInviteResponse, error)
	// Must be group administrator or sender or recipient.
	ListInvites(ctx context.Context, in *ListInvitesRequest, opts ...grpc.CallOption) (*ListInvitesResponse, error)
	// TODO: Next sprint -- Leave blank.
	// Must be group administrator or sender. Deletes the invitation without
	// making the recipient join the group.
	RevokeInvite(ctx context.Context, in *RevokeInviteRequest, opts ...grpc.CallOption) (*RevokeInviteResponse, error)
}

type invitesAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewInvitesAPIClient(cc grpc.ClientConnInterface) InvitesAPIClient {
	return &invitesAPIClient{cc}
}

func (c *invitesAPIClient) SendInvite(ctx context.Context, in *SendInviteRequest, opts ...grpc.CallOption) (*SendInviteResponse, error) {
	out := new(SendInviteResponse)
	err := c.cc.Invoke(ctx, "/noted.accounts.v1.InvitesAPI/SendInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invitesAPIClient) GetInvite(ctx context.Context, in *GetInviteRequest, opts ...grpc.CallOption) (*GetInviteResponse, error) {
	out := new(GetInviteResponse)
	err := c.cc.Invoke(ctx, "/noted.accounts.v1.InvitesAPI/GetInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invitesAPIClient) AcceptInvite(ctx context.Context, in *AcceptInviteRequest, opts ...grpc.CallOption) (*AcceptInviteResponse, error) {
	out := new(AcceptInviteResponse)
	err := c.cc.Invoke(ctx, "/noted.accounts.v1.InvitesAPI/AcceptInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invitesAPIClient) DenyInvite(ctx context.Context, in *DenyInviteRequest, opts ...grpc.CallOption) (*DenyInviteResponse, error) {
	out := new(DenyInviteResponse)
	err := c.cc.Invoke(ctx, "/noted.accounts.v1.InvitesAPI/DenyInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invitesAPIClient) ListInvites(ctx context.Context, in *ListInvitesRequest, opts ...grpc.CallOption) (*ListInvitesResponse, error) {
	out := new(ListInvitesResponse)
	err := c.cc.Invoke(ctx, "/noted.accounts.v1.InvitesAPI/ListInvites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invitesAPIClient) RevokeInvite(ctx context.Context, in *RevokeInviteRequest, opts ...grpc.CallOption) (*RevokeInviteResponse, error) {
	out := new(RevokeInviteResponse)
	err := c.cc.Invoke(ctx, "/noted.accounts.v1.InvitesAPI/RevokeInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InvitesAPIServer is the server API for InvitesAPI service.
// All implementations must embed UnimplementedInvitesAPIServer
// for forward compatibility
type InvitesAPIServer interface {
	// The sender defaults to the authenticated user. Must be group member.
	SendInvite(context.Context, *SendInviteRequest) (*SendInviteResponse, error)
	// Must be group administrator or sender or recipient.
	GetInvite(context.Context, *GetInviteRequest) (*GetInviteResponse, error)
	// Must be recipient. Accepting an invitation automatically adds the
	// recipient to the group and deletes the invite.
	AcceptInvite(context.Context, *AcceptInviteRequest) (*AcceptInviteResponse, error)
	// Must be recipient. Deletes the invitation without making the
	// recipient join the group.
	DenyInvite(context.Context, *DenyInviteRequest) (*DenyInviteResponse, error)
	// Must be group administrator or sender or recipient.
	ListInvites(context.Context, *ListInvitesRequest) (*ListInvitesResponse, error)
	// TODO: Next sprint -- Leave blank.
	// Must be group administrator or sender. Deletes the invitation without
	// making the recipient join the group.
	RevokeInvite(context.Context, *RevokeInviteRequest) (*RevokeInviteResponse, error)
	mustEmbedUnimplementedInvitesAPIServer()
}

// UnimplementedInvitesAPIServer must be embedded to have forward compatible implementations.
type UnimplementedInvitesAPIServer struct {
}

func (UnimplementedInvitesAPIServer) SendInvite(context.Context, *SendInviteRequest) (*SendInviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendInvite not implemented")
}
func (UnimplementedInvitesAPIServer) GetInvite(context.Context, *GetInviteRequest) (*GetInviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvite not implemented")
}
func (UnimplementedInvitesAPIServer) AcceptInvite(context.Context, *AcceptInviteRequest) (*AcceptInviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptInvite not implemented")
}
func (UnimplementedInvitesAPIServer) DenyInvite(context.Context, *DenyInviteRequest) (*DenyInviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DenyInvite not implemented")
}
func (UnimplementedInvitesAPIServer) ListInvites(context.Context, *ListInvitesRequest) (*ListInvitesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInvites not implemented")
}
func (UnimplementedInvitesAPIServer) RevokeInvite(context.Context, *RevokeInviteRequest) (*RevokeInviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeInvite not implemented")
}
func (UnimplementedInvitesAPIServer) mustEmbedUnimplementedInvitesAPIServer() {}

// UnsafeInvitesAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InvitesAPIServer will
// result in compilation errors.
type UnsafeInvitesAPIServer interface {
	mustEmbedUnimplementedInvitesAPIServer()
}

func RegisterInvitesAPIServer(s grpc.ServiceRegistrar, srv InvitesAPIServer) {
	s.RegisterService(&InvitesAPI_ServiceDesc, srv)
}

func _InvitesAPI_SendInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvitesAPIServer).SendInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noted.accounts.v1.InvitesAPI/SendInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvitesAPIServer).SendInvite(ctx, req.(*SendInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvitesAPI_GetInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvitesAPIServer).GetInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noted.accounts.v1.InvitesAPI/GetInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvitesAPIServer).GetInvite(ctx, req.(*GetInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvitesAPI_AcceptInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvitesAPIServer).AcceptInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noted.accounts.v1.InvitesAPI/AcceptInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvitesAPIServer).AcceptInvite(ctx, req.(*AcceptInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvitesAPI_DenyInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DenyInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvitesAPIServer).DenyInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noted.accounts.v1.InvitesAPI/DenyInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvitesAPIServer).DenyInvite(ctx, req.(*DenyInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvitesAPI_ListInvites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInvitesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvitesAPIServer).ListInvites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noted.accounts.v1.InvitesAPI/ListInvites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvitesAPIServer).ListInvites(ctx, req.(*ListInvitesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvitesAPI_RevokeInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvitesAPIServer).RevokeInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noted.accounts.v1.InvitesAPI/RevokeInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvitesAPIServer).RevokeInvite(ctx, req.(*RevokeInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InvitesAPI_ServiceDesc is the grpc.ServiceDesc for InvitesAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InvitesAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "noted.accounts.v1.InvitesAPI",
	HandlerType: (*InvitesAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendInvite",
			Handler:    _InvitesAPI_SendInvite_Handler,
		},
		{
			MethodName: "GetInvite",
			Handler:    _InvitesAPI_GetInvite_Handler,
		},
		{
			MethodName: "AcceptInvite",
			Handler:    _InvitesAPI_AcceptInvite_Handler,
		},
		{
			MethodName: "DenyInvite",
			Handler:    _InvitesAPI_DenyInvite_Handler,
		},
		{
			MethodName: "ListInvites",
			Handler:    _InvitesAPI_ListInvites_Handler,
		},
		{
			MethodName: "RevokeInvite",
			Handler:    _InvitesAPI_RevokeInvite_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "noted/accounts/v1/invites.proto",
}
