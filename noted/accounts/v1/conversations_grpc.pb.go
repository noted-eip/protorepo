// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConversationsAPIClient is the client API for ConversationsAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConversationsAPIClient interface {
	// Internal endpoint. Invoked upon group creation.
	CreateConversation(ctx context.Context, in *CreateConversationRequest, opts ...grpc.CallOption) (*CreateConversationResponse, error)
	// Must be group member.
	GetConversation(ctx context.Context, in *GetConversationRequest, opts ...grpc.CallOption) (*GetConversationResponse, error)
	// Must be group admin. Can only update `title`.
	UpdateConversation(ctx context.Context, in *UpdateConversationRequest, opts ...grpc.CallOption) (*UpdateConversationResponse, error)
	// Internal endpoint. Invoked upon group deletion.
	DeleteConversation(ctx context.Context, in *DeleteConversationRequest, opts ...grpc.CallOption) (*DeleteConversationResponse, error)
	// Must be group member.
	ListConversations(ctx context.Context, in *ListConversationsRequest, opts ...grpc.CallOption) (*ListConversationsResponse, error)
	// Must be group member.
	SendConversationMessage(ctx context.Context, in *SendConversationMessageRequest, opts ...grpc.CallOption) (*SendConversationMessageResponse, error)
	// Must be group member.
	GetConversationMessage(ctx context.Context, in *GetConversationMessageRequest, opts ...grpc.CallOption) (*GetConversationMessageResponse, error)
	// Must be sender. Can only update `content`.
	UpdateConversationMessage(ctx context.Context, in *UpdateConversationMessageRequest, opts ...grpc.CallOption) (*UpdateConversationMessageResponse, error)
	// Must be sender or group admin.
	DeleteConversationMessage(ctx context.Context, in *DeleteConversationMessageRequest, opts ...grpc.CallOption) (*DeleteConversationMessageResponse, error)
	// Must be group member. Messages are sorted in reverse chronological order.
	ListConversationMessages(ctx context.Context, in *ListConversationMessagesRequest, opts ...grpc.CallOption) (*ListConversationMessagesResponse, error)
}

type conversationsAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewConversationsAPIClient(cc grpc.ClientConnInterface) ConversationsAPIClient {
	return &conversationsAPIClient{cc}
}

func (c *conversationsAPIClient) CreateConversation(ctx context.Context, in *CreateConversationRequest, opts ...grpc.CallOption) (*CreateConversationResponse, error) {
	out := new(CreateConversationResponse)
	err := c.cc.Invoke(ctx, "/noted.accounts.v1.ConversationsAPI/CreateConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationsAPIClient) GetConversation(ctx context.Context, in *GetConversationRequest, opts ...grpc.CallOption) (*GetConversationResponse, error) {
	out := new(GetConversationResponse)
	err := c.cc.Invoke(ctx, "/noted.accounts.v1.ConversationsAPI/GetConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationsAPIClient) UpdateConversation(ctx context.Context, in *UpdateConversationRequest, opts ...grpc.CallOption) (*UpdateConversationResponse, error) {
	out := new(UpdateConversationResponse)
	err := c.cc.Invoke(ctx, "/noted.accounts.v1.ConversationsAPI/UpdateConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationsAPIClient) DeleteConversation(ctx context.Context, in *DeleteConversationRequest, opts ...grpc.CallOption) (*DeleteConversationResponse, error) {
	out := new(DeleteConversationResponse)
	err := c.cc.Invoke(ctx, "/noted.accounts.v1.ConversationsAPI/DeleteConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationsAPIClient) ListConversations(ctx context.Context, in *ListConversationsRequest, opts ...grpc.CallOption) (*ListConversationsResponse, error) {
	out := new(ListConversationsResponse)
	err := c.cc.Invoke(ctx, "/noted.accounts.v1.ConversationsAPI/ListConversations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationsAPIClient) SendConversationMessage(ctx context.Context, in *SendConversationMessageRequest, opts ...grpc.CallOption) (*SendConversationMessageResponse, error) {
	out := new(SendConversationMessageResponse)
	err := c.cc.Invoke(ctx, "/noted.accounts.v1.ConversationsAPI/SendConversationMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationsAPIClient) GetConversationMessage(ctx context.Context, in *GetConversationMessageRequest, opts ...grpc.CallOption) (*GetConversationMessageResponse, error) {
	out := new(GetConversationMessageResponse)
	err := c.cc.Invoke(ctx, "/noted.accounts.v1.ConversationsAPI/GetConversationMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationsAPIClient) UpdateConversationMessage(ctx context.Context, in *UpdateConversationMessageRequest, opts ...grpc.CallOption) (*UpdateConversationMessageResponse, error) {
	out := new(UpdateConversationMessageResponse)
	err := c.cc.Invoke(ctx, "/noted.accounts.v1.ConversationsAPI/UpdateConversationMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationsAPIClient) DeleteConversationMessage(ctx context.Context, in *DeleteConversationMessageRequest, opts ...grpc.CallOption) (*DeleteConversationMessageResponse, error) {
	out := new(DeleteConversationMessageResponse)
	err := c.cc.Invoke(ctx, "/noted.accounts.v1.ConversationsAPI/DeleteConversationMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationsAPIClient) ListConversationMessages(ctx context.Context, in *ListConversationMessagesRequest, opts ...grpc.CallOption) (*ListConversationMessagesResponse, error) {
	out := new(ListConversationMessagesResponse)
	err := c.cc.Invoke(ctx, "/noted.accounts.v1.ConversationsAPI/ListConversationMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConversationsAPIServer is the server API for ConversationsAPI service.
// All implementations must embed UnimplementedConversationsAPIServer
// for forward compatibility
type ConversationsAPIServer interface {
	// Internal endpoint. Invoked upon group creation.
	CreateConversation(context.Context, *CreateConversationRequest) (*CreateConversationResponse, error)
	// Must be group member.
	GetConversation(context.Context, *GetConversationRequest) (*GetConversationResponse, error)
	// Must be group admin. Can only update `title`.
	UpdateConversation(context.Context, *UpdateConversationRequest) (*UpdateConversationResponse, error)
	// Internal endpoint. Invoked upon group deletion.
	DeleteConversation(context.Context, *DeleteConversationRequest) (*DeleteConversationResponse, error)
	// Must be group member.
	ListConversations(context.Context, *ListConversationsRequest) (*ListConversationsResponse, error)
	// Must be group member.
	SendConversationMessage(context.Context, *SendConversationMessageRequest) (*SendConversationMessageResponse, error)
	// Must be group member.
	GetConversationMessage(context.Context, *GetConversationMessageRequest) (*GetConversationMessageResponse, error)
	// Must be sender. Can only update `content`.
	UpdateConversationMessage(context.Context, *UpdateConversationMessageRequest) (*UpdateConversationMessageResponse, error)
	// Must be sender or group admin.
	DeleteConversationMessage(context.Context, *DeleteConversationMessageRequest) (*DeleteConversationMessageResponse, error)
	// Must be group member. Messages are sorted in reverse chronological order.
	ListConversationMessages(context.Context, *ListConversationMessagesRequest) (*ListConversationMessagesResponse, error)
	mustEmbedUnimplementedConversationsAPIServer()
}

// UnimplementedConversationsAPIServer must be embedded to have forward compatible implementations.
type UnimplementedConversationsAPIServer struct {
}

func (UnimplementedConversationsAPIServer) CreateConversation(context.Context, *CreateConversationRequest) (*CreateConversationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConversation not implemented")
}
func (UnimplementedConversationsAPIServer) GetConversation(context.Context, *GetConversationRequest) (*GetConversationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConversation not implemented")
}
func (UnimplementedConversationsAPIServer) UpdateConversation(context.Context, *UpdateConversationRequest) (*UpdateConversationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConversation not implemented")
}
func (UnimplementedConversationsAPIServer) DeleteConversation(context.Context, *DeleteConversationRequest) (*DeleteConversationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConversation not implemented")
}
func (UnimplementedConversationsAPIServer) ListConversations(context.Context, *ListConversationsRequest) (*ListConversationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConversations not implemented")
}
func (UnimplementedConversationsAPIServer) SendConversationMessage(context.Context, *SendConversationMessageRequest) (*SendConversationMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendConversationMessage not implemented")
}
func (UnimplementedConversationsAPIServer) GetConversationMessage(context.Context, *GetConversationMessageRequest) (*GetConversationMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConversationMessage not implemented")
}
func (UnimplementedConversationsAPIServer) UpdateConversationMessage(context.Context, *UpdateConversationMessageRequest) (*UpdateConversationMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConversationMessage not implemented")
}
func (UnimplementedConversationsAPIServer) DeleteConversationMessage(context.Context, *DeleteConversationMessageRequest) (*DeleteConversationMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConversationMessage not implemented")
}
func (UnimplementedConversationsAPIServer) ListConversationMessages(context.Context, *ListConversationMessagesRequest) (*ListConversationMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConversationMessages not implemented")
}
func (UnimplementedConversationsAPIServer) mustEmbedUnimplementedConversationsAPIServer() {}

// UnsafeConversationsAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConversationsAPIServer will
// result in compilation errors.
type UnsafeConversationsAPIServer interface {
	mustEmbedUnimplementedConversationsAPIServer()
}

func RegisterConversationsAPIServer(s grpc.ServiceRegistrar, srv ConversationsAPIServer) {
	s.RegisterService(&ConversationsAPI_ServiceDesc, srv)
}

func _ConversationsAPI_CreateConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationsAPIServer).CreateConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noted.accounts.v1.ConversationsAPI/CreateConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationsAPIServer).CreateConversation(ctx, req.(*CreateConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationsAPI_GetConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationsAPIServer).GetConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noted.accounts.v1.ConversationsAPI/GetConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationsAPIServer).GetConversation(ctx, req.(*GetConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationsAPI_UpdateConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationsAPIServer).UpdateConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noted.accounts.v1.ConversationsAPI/UpdateConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationsAPIServer).UpdateConversation(ctx, req.(*UpdateConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationsAPI_DeleteConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationsAPIServer).DeleteConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noted.accounts.v1.ConversationsAPI/DeleteConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationsAPIServer).DeleteConversation(ctx, req.(*DeleteConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationsAPI_ListConversations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConversationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationsAPIServer).ListConversations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noted.accounts.v1.ConversationsAPI/ListConversations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationsAPIServer).ListConversations(ctx, req.(*ListConversationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationsAPI_SendConversationMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendConversationMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationsAPIServer).SendConversationMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noted.accounts.v1.ConversationsAPI/SendConversationMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationsAPIServer).SendConversationMessage(ctx, req.(*SendConversationMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationsAPI_GetConversationMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConversationMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationsAPIServer).GetConversationMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noted.accounts.v1.ConversationsAPI/GetConversationMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationsAPIServer).GetConversationMessage(ctx, req.(*GetConversationMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationsAPI_UpdateConversationMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConversationMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationsAPIServer).UpdateConversationMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noted.accounts.v1.ConversationsAPI/UpdateConversationMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationsAPIServer).UpdateConversationMessage(ctx, req.(*UpdateConversationMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationsAPI_DeleteConversationMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConversationMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationsAPIServer).DeleteConversationMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noted.accounts.v1.ConversationsAPI/DeleteConversationMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationsAPIServer).DeleteConversationMessage(ctx, req.(*DeleteConversationMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationsAPI_ListConversationMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConversationMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationsAPIServer).ListConversationMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noted.accounts.v1.ConversationsAPI/ListConversationMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationsAPIServer).ListConversationMessages(ctx, req.(*ListConversationMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConversationsAPI_ServiceDesc is the grpc.ServiceDesc for ConversationsAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConversationsAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "noted.accounts.v1.ConversationsAPI",
	HandlerType: (*ConversationsAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateConversation",
			Handler:    _ConversationsAPI_CreateConversation_Handler,
		},
		{
			MethodName: "GetConversation",
			Handler:    _ConversationsAPI_GetConversation_Handler,
		},
		{
			MethodName: "UpdateConversation",
			Handler:    _ConversationsAPI_UpdateConversation_Handler,
		},
		{
			MethodName: "DeleteConversation",
			Handler:    _ConversationsAPI_DeleteConversation_Handler,
		},
		{
			MethodName: "ListConversations",
			Handler:    _ConversationsAPI_ListConversations_Handler,
		},
		{
			MethodName: "SendConversationMessage",
			Handler:    _ConversationsAPI_SendConversationMessage_Handler,
		},
		{
			MethodName: "GetConversationMessage",
			Handler:    _ConversationsAPI_GetConversationMessage_Handler,
		},
		{
			MethodName: "UpdateConversationMessage",
			Handler:    _ConversationsAPI_UpdateConversationMessage_Handler,
		},
		{
			MethodName: "DeleteConversationMessage",
			Handler:    _ConversationsAPI_DeleteConversationMessage_Handler,
		},
		{
			MethodName: "ListConversationMessages",
			Handler:    _ConversationsAPI_ListConversationMessages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "noted/accounts/v1/conversations.proto",
}
