syntax = "proto3";

package noted.accounts.v1;

option go_package = "noted/accounts/v1";

import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "google/api/field_behavior.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
    info: {
        title: "Noted API Documentation";
        version: "1.0";
    }
    security: {
		security_requirement: {
			key: "bearerAuth";
			value: {};
		}
	}
    responses: {
		key: "404";
		value: {
			description: "Resource not found or lacking permissions to access the resource.";
			schema: {
				json_schema: {
                    ref: ".noted.common.v1.HttpError"
				}
			}
		}
	}
};

message Account {
    string id = 1 [(google.api.field_behavior) = REQUIRED];
    string name = 2 [(google.api.field_behavior) = REQUIRED];
    string email = 3 [(google.api.field_behavior) = REQUIRED];
}

// Creation, read, update and deletion of accounts.
// Authentication using email/password and using OAuth.
// Manages password recovery.
service AccountsAPI {
    // Create an account using the email and password flow.
    rpc CreateAccount(CreateAccountRequest) returns (CreateAccountResponse) {
        option (google.api.http) = {
            post: "/accounts",
            body: "*",
        };
    }

    // Allows getting an account by ID or searching for one through email.
    rpc GetAccount(GetAccountRequest) returns (GetAccountResponse) {
        option (google.api.http) = {
            get: "/accounts/{account_id}",
            additional_bindings: [
                {
                    post: "/search/accounts"
                    body: "*"
                }
            ]
        };
    }

    // Must be account owner. Can only update `account.name`.
    rpc UpdateAccount(UpdateAccountRequest) returns (UpdateAccountResponse) {
        option (google.api.http) = {
            patch: "/accounts/{account_id}",
            body: "account",
        };
    }

    // Must be account owner.
    rpc DeleteAccount(DeleteAccountRequest) returns (DeleteAccountResponse) {
        option (google.api.http) = {
            delete: "/accounts/{account_id}",
        };
    }

    // List users based on email regex.
    rpc ListAccounts(ListAccountsRequest) returns (ListAccountsResponse) {
        option (google.api.http) = {
            get: "/accounts",
        };
    }

    // Send email to account containing code to create a new password.
    rpc ForgetAccountPassword(ForgetAccountPasswordRequest) returns (ForgetAccountPasswordResponse) {
        option (google.api.http) = {
            post: "/accounts/forget",
            body: "*",
        };
    }

    // Compare forgot password token provided by user with the one store in db.
    rpc ForgetAccountPasswordValidateToken(ForgetAccountPasswordValidateTokenRequest) returns (ForgetAccountPasswordValidateTokenResponse) {
        option (google.api.http) = {
            post: "/accounts/forget/validate",
            body: "*",
        };
    }

    // Update account password.
    rpc UpdateAccountPassword(UpdateAccountPasswordRequest) returns (UpdateAccountPasswordResponse) {
        option (google.api.http) = {
            patch: "/accounts/{account_id}/password",
            body: "*",
        };
    }

    // Validate account email.
    rpc ValidateAccount(ValidateAccountRequest) returns (ValidateAccountResponse) {
        option (google.api.http) = {
            patch: "/accounts/{account_id}/validate",
            body: "*",
        };
    }

    // Authenticate using the email and password flow.
    rpc Authenticate(AuthenticateRequest) returns (AuthenticateResponse) {
        option (google.api.http) = {
            post: "/authenticate",
            body: "*",
        };
    }
    // Authenticate using the Google OAuth flow.
    rpc AuthenticateGoogle(AuthenticateGoogleRequest) returns (AuthenticateGoogleResponse) {
        option (google.api.http) = {
            post: "/authenticate/google",
            body: "*",
        };
    }
    
}

message CreateAccountRequest {
    string password = 1 [(google.api.field_behavior) = REQUIRED];;
    string email = 2 [(google.api.field_behavior) = REQUIRED];;
    string name = 3 [(google.api.field_behavior) = REQUIRED];;
}

message CreateAccountResponse {
    Account account = 1 [(google.api.field_behavior) = REQUIRED];
}

message GetAccountRequest {
    string account_id = 1;
    string email = 2;
}

message GetAccountResponse {
    Account account = 1 [(google.api.field_behavior) = REQUIRED];
}

message UpdateAccountRequest {
    string account_id = 1;
    Account account = 2 [(google.api.field_behavior) = REQUIRED];
    google.protobuf.FieldMask update_mask = 3;
}

message UpdateAccountResponse {
    Account account = 1 [(google.api.field_behavior) = REQUIRED];
}

message DeleteAccountRequest {
    string account_id = 1;
}

message DeleteAccountResponse {
}

message AuthenticateRequest {
    string email = 1 [(google.api.field_behavior) = REQUIRED];
    string password = 2 [(google.api.field_behavior) = REQUIRED];
}

message AuthenticateResponse {
    string token = 1 [(google.api.field_behavior) = REQUIRED];
}

message ListAccountsRequest {
    string email_contains = 3 [(google.api.field_behavior) = REQUIRED];
    int32 limit = 1;
    int32 offset = 2;
}

message ListAccountsResponse {
    repeated Account accounts = 1;
}

message ForgetAccountPasswordRequest {
    string email = 1  [(google.api.field_behavior) = REQUIRED];
}

message ForgetAccountPasswordResponse {
    string account_id = 1  [(google.api.field_behavior) = REQUIRED];
    string valid_until = 2  [(google.api.field_behavior) = REQUIRED];
}

message ForgetAccountPasswordValidateTokenRequest {
    string account_id = 1  [(google.api.field_behavior) = REQUIRED];
    string token = 2  [(google.api.field_behavior) = REQUIRED];
}

message ForgetAccountPasswordValidateTokenResponse {
    Account account = 1 [(google.api.field_behavior) = REQUIRED];
    string reset_token = 2  [(google.api.field_behavior) = REQUIRED];
    string auth_token = 3  [(google.api.field_behavior) = REQUIRED];
}

message UpdateAccountPasswordRequest {
    string account_id = 1 [(google.api.field_behavior) = REQUIRED];
    string password = 2 [(google.api.field_behavior) = REQUIRED];

    //Token from the reset email password if forgot password
    string token = 3 [(google.api.field_behavior) = OPTIONAL];
    //Old password if the account is already log-in
    string old_password = 4 [(google.api.field_behavior) = OPTIONAL];
}

message UpdateAccountPasswordResponse {
    Account account = 1 [(google.api.field_behavior) = REQUIRED];
}

message ValidateAccountRequest {
    string account_id = 1 [(google.api.field_behavior) = REQUIRED];
    string validation_token = 2 [(google.api.field_behavior) = REQUIRED];
}

message ValidateAccountResponse {
    Account account = 1 [(google.api.field_behavior) = REQUIRED];
}

message AuthenticateGoogleRequest {
    string code = 1 [(google.api.field_behavior) = REQUIRED];
}

message AuthenticateGoogleResponse {
    string token = 1 [(google.api.field_behavior) = REQUIRED];
}

message SendGroupInviteMailRequest {
    string recipient_id = 1 [(google.api.field_behavior) = REQUIRED];
    string sender_id = 2 [(google.api.field_behavior) = REQUIRED];
    string group_name = 3 [(google.api.field_behavior) = REQUIRED];
    google.protobuf.Timestamp valid_until = 4 [(google.api.field_behavior) = REQUIRED];
}

message SendGroupInviteMailResponse {
}