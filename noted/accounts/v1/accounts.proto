syntax = "proto3";

package noted.accounts.v1;

option go_package = "noted/accounts/v1";

import "google/protobuf/field_mask.proto";

message Account {
    string id = 1;
    string name = 2;
    string email = 3;
}

// Creation, read, update and deletion of accounts.
// Authentication using email/password and using OAuth.
// Manages password recovery.
service AccountsAPI {
    // Create an account using the email and password flow.
    rpc CreateAccount(CreateAccountRequest) returns (CreateAccountResponse) {}
    // Must be authenticated.
    rpc GetAccount(GetAccountRequest) returns (GetAccountResponse) {}
    // Must be account owner. Can only update `account.name`.
    rpc UpdateAccount(UpdateAccountRequest) returns (UpdateAccountResponse) {}
    // Must be account owner.
    // TODO: Delete all associated resources (notes, transfer group ownership,
    // etc).
    rpc DeleteAccount(DeleteAccountRequest) returns (DeleteAccountResponse) {}
    // This endpoint is not meant to be used by regular users.
    // Only works with an internal token.
    rpc ListAccounts(ListAccountsRequest) returns (ListAccountsResponse) {}

    // Authenticate using the email and password flow.
    rpc Authenticate(AuthenticateRequest) returns (AuthenticateResponse) {}
}

message CreateAccountRequest {
    string password = 1;
    string email = 2;
    string name = 3;
}

message CreateAccountResponse {
    Account account = 1;
}

message GetAccountRequest {
    string email = 1;
    string id = 2;
}

message GetAccountResponse {
    Account account = 1;
}

message UpdateAccountRequest {
    Account account = 1;
    google.protobuf.FieldMask update_mask = 2;
}

message UpdateAccountResponse {
    Account account = 1;
}

message DeleteAccountRequest {
    string id = 1;
}

message DeleteAccountResponse {
}

message AuthenticateRequest {
    string email = 1;
    string password = 2;
}

message AuthenticateResponse {
    string token = 1;
}

message ListAccountsRequest {
    int32 limit = 1;
    int32 offset = 2;
}

message ListAccountsResponse {
    repeated Account accounts = 1;
}
