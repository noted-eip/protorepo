syntax = "proto3";

package noted.accounts.v1;

option go_package = "noted/accounts/v1";

import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";

message Group {
    string id = 1;
    string name = 2;
    string description = 3;
    google.protobuf.Timestamp created_at = 4;
}

message GroupMember {
    string account_id = 1;
    string role = 2;
    google.protobuf.Timestamp created_at = 3;
}

// GroupNote is the representation of a note stored wihtin the context of
// a group (which folder it belongs to, who wrote it, its title).
// The actual note is stored in the notes-service.
message GroupNote {
    // ID of the note within the notes-service.
    string note_id = 1;
    string title = 2;
    string author_account_id = 3;
    // Next sprint -- Leave blank.
    string folder_id = 4;
}

// Creation, read/update, deletion of groups of users.
// Addition and removal of group members with roles.
// Management of notes and folders within a group.
service GroupsAPI {
    // Creates a group with a single administrator member (the authenticated user).
    // Must be authenticated.
    rpc CreateGroup(CreateGroupRequest) returns (CreateGroupResponse) {}
    // Must be authenticated.
    rpc GetGroup(GetGroupRequest) returns (GetGroupResponse) {}
    // Must be group administrator.
    // Deletes all the associated resources (members, notes).
    rpc DeleteGroup(DeleteGroupRequest) returns (DeleteGroupResponse) {}
    // Must be group administrator.
    rpc UpdateGroup(UpdateGroupRequest) returns (UpdateGroupResponse) {}
    // Must be groups member.
    rpc ListGroups(ListGroupsRequest) returns (ListGroupsResponse) {}

    // This endpoint is not meant to be used by regular users. Use the InvitesAPI instead.
    // Only works with an internal token.
    rpc AddGroupMember(AddGroupMemberRequest) returns (AddGroupMemberResponse) {}
    // Must be group member.
    rpc GetGroupMember(GetGroupMemberRequest) returns (GetGroupMemberResponse) {}
    // Must be group administrator. Can only update `role`.
    rpc UpdateGroupMember(UpdateGroupMemberRequest) returns (UpdateGroupMemberResponse) {}
    // Must be group administrator or the authenticated user removing itself from
    // the group.
    rpc RemoveGroupMember(RemoveGroupMemberRequest) returns (RemoveGroupMemberResponse) {}
    // Must be group member.
    rpc ListGroupMembers(ListGroupMembersRequest) returns (ListGroupMembersResponse) {}

    // Must be group member and author of the note.
    rpc AddGroupNote(AddGroupNoteRequest) returns (AddGroupNoteResponse) {}
    // Must be group member.
    rpc GetGroupNote(GetGroupNoteRequest) returns (GetGroupNoteResponse) {}
    // Must be group member. Can only update `note.title` and `note.folder_id`.
    rpc UpdateGroupNote(UpdateGroupNoteRequest) returns (UpdateGroupNoteResponse) {}
    // Must be group member, author of the note or administrator.
    rpc RemoveGroupNote(RemoveGroupNoteRequest) returns (RemoveGroupNoteResponse) {}
    // Must be group member.
    rpc ListGroupNotes(ListGroupNotesRequest) returns (ListGroupNotesResponse) {}

    // TODO: Next sprint -- Leave blank.
    rpc CreateFolder(CreateFolderRequest) returns (CreateFolderResponse) {}
    rpc DeleteFolder(DeleteFolderRequest) returns (DeleteFolderResponse) {}
    rpc UpdateFolder(UpdateFolderRequest) returns (UpdateFolderResponse) {}
    rpc ListFolders(ListFoldersRequest) returns (ListFoldersResponse) {}
}

message CreateGroupRequest {
    string name = 1;
    string description = 2;
}

message CreateGroupResponse {
    Group group = 1;
}

message GetGroupRequest {
    string group_id = 1;
}

message GetGroupResponse {
    Group group = 1;
}

message DeleteGroupRequest {
    string group_id = 1;
}

message DeleteGroupResponse {
}

message UpdateGroupRequest {
    Group group = 1;
    google.protobuf.FieldMask update_mask = 2;
}

message UpdateGroupResponse {
    Group group = 1;
}

message ListGroupsRequest {
    string account_id = 1;
}

message ListGroupsResponse {
    repeated Group groups = 1;
}

message ListGroupMembersRequest {
    string group_id = 1;
}

message ListGroupMembersResponse {
    repeated GroupMember members = 1;
}

message AddGroupMemberRequest {
    string group_id = 1;
    string account_id = 2;
}

message AddGroupMemberResponse {
}

message GetGroupMemberRequest {
    string group_id = 1;
    string account_id = 2;
}

message GetGroupMemberResponse {
    GroupMember member = 1;
}

message UpdateGroupMemberRequest {
    string group_id = 1;
    GroupMember member = 2;
    google.protobuf.FieldMask update_mask = 3;
}

message UpdateGroupMemberResponse {
    GroupMember member = 1;
}

message RemoveGroupMemberRequest {
    string group_id = 1;
    string account_id = 2;
}

message RemoveGroupMemberResponse {

}

message AddGroupNoteRequest {
    string group_id = 1;
    // ID of the note within the notes-service.
    string note_id = 2;
    string title = 3;
    // Defaults to the authenticated user.
    string author_account_id = 4;
    // Next sprint -- Leave blank.
    string folder_id = 5;
}

message AddGroupNoteResponse {
    GroupNote note = 1;
}

message GetGroupNoteRequest {
    string group_id = 1;
    string note_id = 2;
}

message GetGroupNoteResponse {
    GroupNote note = 1;
}

message UpdateGroupNoteRequest {
    string group_id = 1;
    GroupNote note = 2;
    google.protobuf.FieldMask update_mask = 3;
}

message UpdateGroupNoteResponse {
    GroupNote note = 1;
}

message RemoveGroupNoteRequest {
    string group_id = 1;
    string note_id = 2;
}

message RemoveGroupNoteResponse {

}

message ListGroupNotesRequest {
    string group_id = 1;
    // (Optional) List only notes from that account.
    string author_account_id = 2;

    // Next sprint -- Leave blank.
    // (Optional) List notes only from a given folder.
    string folder_id = 3;

    string limit = 4;
    string offset = 5;
}

message ListGroupNotesResponse {
    GroupNote notes = 1;
}

message CreateFolderRequest {
    // TODO: Next sprint.
}

message CreateFolderResponse {
    // TODO: Next sprint.
}

message DeleteFolderRequest {
    // TODO: Next sprint.
}

message DeleteFolderResponse {
    // TODO: Next sprint.
}

message UpdateFolderRequest {
    // TODO: Next sprint.
}

message UpdateFolderResponse {
    // TODO: Next sprint.
}

message ListFoldersRequest {
    // TODO: Next sprint.
}

message ListFoldersResponse {
    // TODO: Next sprint.
}
