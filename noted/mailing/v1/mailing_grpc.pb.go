// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MailingAPIClient is the client API for MailingAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MailingAPIClient interface {
	// Send email to accounts with markdown content.
	SendEmail(ctx context.Context, in *SendEmailRequest, opts ...grpc.CallOption) (*SendEmailResponse, error)
}

type mailingAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewMailingAPIClient(cc grpc.ClientConnInterface) MailingAPIClient {
	return &mailingAPIClient{cc}
}

func (c *mailingAPIClient) SendEmail(ctx context.Context, in *SendEmailRequest, opts ...grpc.CallOption) (*SendEmailResponse, error) {
	out := new(SendEmailResponse)
	err := c.cc.Invoke(ctx, "/noted.mailing.v1.MailingAPI/SendEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MailingAPIServer is the server API for MailingAPI service.
// All implementations must embed UnimplementedMailingAPIServer
// for forward compatibility
type MailingAPIServer interface {
	// Send email to accounts with markdown content.
	SendEmail(context.Context, *SendEmailRequest) (*SendEmailResponse, error)
	mustEmbedUnimplementedMailingAPIServer()
}

// UnimplementedMailingAPIServer must be embedded to have forward compatible implementations.
type UnimplementedMailingAPIServer struct {
}

func (UnimplementedMailingAPIServer) SendEmail(context.Context, *SendEmailRequest) (*SendEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmail not implemented")
}
func (UnimplementedMailingAPIServer) mustEmbedUnimplementedMailingAPIServer() {}

// UnsafeMailingAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MailingAPIServer will
// result in compilation errors.
type UnsafeMailingAPIServer interface {
	mustEmbedUnimplementedMailingAPIServer()
}

func RegisterMailingAPIServer(s grpc.ServiceRegistrar, srv MailingAPIServer) {
	s.RegisterService(&MailingAPI_ServiceDesc, srv)
}

func _MailingAPI_SendEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailingAPIServer).SendEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noted.mailing.v1.MailingAPI/SendEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailingAPIServer).SendEmail(ctx, req.(*SendEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MailingAPI_ServiceDesc is the grpc.ServiceDesc for MailingAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MailingAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "noted.mailing.v1.MailingAPI",
	HandlerType: (*MailingAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendEmail",
			Handler:    _MailingAPI_SendEmail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "noted/mailing/v1/mailing.proto",
}
