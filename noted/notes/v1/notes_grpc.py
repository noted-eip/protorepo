# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: noted/notes/v1/notes.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

import google.protobuf.field_mask_pb2
import noted.notes.v1.notes_pb2


class NotesAPIBase(abc.ABC):

    @abc.abstractmethod
    async def GetNote(self, stream: 'grpclib.server.Stream[noted.notes.v1.notes_pb2.GetNoteRequest, noted.notes.v1.notes_pb2.GetNoteResponse]') -> None:
        pass

    @abc.abstractmethod
    async def CreateNote(self, stream: 'grpclib.server.Stream[noted.notes.v1.notes_pb2.CreateNoteRequest, noted.notes.v1.notes_pb2.CreateNoteResponse]') -> None:
        pass

    @abc.abstractmethod
    async def UpdateNote(self, stream: 'grpclib.server.Stream[noted.notes.v1.notes_pb2.UpdateNoteRequest, noted.notes.v1.notes_pb2.UpdateNoteResponse]') -> None:
        pass

    @abc.abstractmethod
    async def DeleteNote(self, stream: 'grpclib.server.Stream[noted.notes.v1.notes_pb2.DeleteNoteRequest, noted.notes.v1.notes_pb2.DeleteNoteResponse]') -> None:
        pass

    @abc.abstractmethod
    async def ListNotes(self, stream: 'grpclib.server.Stream[noted.notes.v1.notes_pb2.ListNotesRequest, noted.notes.v1.notes_pb2.ListNotesResponse]') -> None:
        pass

    @abc.abstractmethod
    async def InsertBlock(self, stream: 'grpclib.server.Stream[noted.notes.v1.notes_pb2.InsertBlockRequest, noted.notes.v1.notes_pb2.InsertBlockResponse]') -> None:
        pass

    @abc.abstractmethod
    async def UpdateBlock(self, stream: 'grpclib.server.Stream[noted.notes.v1.notes_pb2.UpdateBlockRequest, noted.notes.v1.notes_pb2.UpdateBlockResponse]') -> None:
        pass

    @abc.abstractmethod
    async def DeleteBlock(self, stream: 'grpclib.server.Stream[noted.notes.v1.notes_pb2.DeleteBlockRequest, noted.notes.v1.notes_pb2.DeleteBlockResponse]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/noted.notes.v1.NotesAPI/GetNote': grpclib.const.Handler(
                self.GetNote,
                grpclib.const.Cardinality.UNARY_UNARY,
                noted.notes.v1.notes_pb2.GetNoteRequest,
                noted.notes.v1.notes_pb2.GetNoteResponse,
            ),
            '/noted.notes.v1.NotesAPI/CreateNote': grpclib.const.Handler(
                self.CreateNote,
                grpclib.const.Cardinality.UNARY_UNARY,
                noted.notes.v1.notes_pb2.CreateNoteRequest,
                noted.notes.v1.notes_pb2.CreateNoteResponse,
            ),
            '/noted.notes.v1.NotesAPI/UpdateNote': grpclib.const.Handler(
                self.UpdateNote,
                grpclib.const.Cardinality.UNARY_UNARY,
                noted.notes.v1.notes_pb2.UpdateNoteRequest,
                noted.notes.v1.notes_pb2.UpdateNoteResponse,
            ),
            '/noted.notes.v1.NotesAPI/DeleteNote': grpclib.const.Handler(
                self.DeleteNote,
                grpclib.const.Cardinality.UNARY_UNARY,
                noted.notes.v1.notes_pb2.DeleteNoteRequest,
                noted.notes.v1.notes_pb2.DeleteNoteResponse,
            ),
            '/noted.notes.v1.NotesAPI/ListNotes': grpclib.const.Handler(
                self.ListNotes,
                grpclib.const.Cardinality.UNARY_UNARY,
                noted.notes.v1.notes_pb2.ListNotesRequest,
                noted.notes.v1.notes_pb2.ListNotesResponse,
            ),
            '/noted.notes.v1.NotesAPI/InsertBlock': grpclib.const.Handler(
                self.InsertBlock,
                grpclib.const.Cardinality.UNARY_UNARY,
                noted.notes.v1.notes_pb2.InsertBlockRequest,
                noted.notes.v1.notes_pb2.InsertBlockResponse,
            ),
            '/noted.notes.v1.NotesAPI/UpdateBlock': grpclib.const.Handler(
                self.UpdateBlock,
                grpclib.const.Cardinality.UNARY_UNARY,
                noted.notes.v1.notes_pb2.UpdateBlockRequest,
                noted.notes.v1.notes_pb2.UpdateBlockResponse,
            ),
            '/noted.notes.v1.NotesAPI/DeleteBlock': grpclib.const.Handler(
                self.DeleteBlock,
                grpclib.const.Cardinality.UNARY_UNARY,
                noted.notes.v1.notes_pb2.DeleteBlockRequest,
                noted.notes.v1.notes_pb2.DeleteBlockResponse,
            ),
        }


class NotesAPIStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.GetNote = grpclib.client.UnaryUnaryMethod(
            channel,
            '/noted.notes.v1.NotesAPI/GetNote',
            noted.notes.v1.notes_pb2.GetNoteRequest,
            noted.notes.v1.notes_pb2.GetNoteResponse,
        )
        self.CreateNote = grpclib.client.UnaryUnaryMethod(
            channel,
            '/noted.notes.v1.NotesAPI/CreateNote',
            noted.notes.v1.notes_pb2.CreateNoteRequest,
            noted.notes.v1.notes_pb2.CreateNoteResponse,
        )
        self.UpdateNote = grpclib.client.UnaryUnaryMethod(
            channel,
            '/noted.notes.v1.NotesAPI/UpdateNote',
            noted.notes.v1.notes_pb2.UpdateNoteRequest,
            noted.notes.v1.notes_pb2.UpdateNoteResponse,
        )
        self.DeleteNote = grpclib.client.UnaryUnaryMethod(
            channel,
            '/noted.notes.v1.NotesAPI/DeleteNote',
            noted.notes.v1.notes_pb2.DeleteNoteRequest,
            noted.notes.v1.notes_pb2.DeleteNoteResponse,
        )
        self.ListNotes = grpclib.client.UnaryUnaryMethod(
            channel,
            '/noted.notes.v1.NotesAPI/ListNotes',
            noted.notes.v1.notes_pb2.ListNotesRequest,
            noted.notes.v1.notes_pb2.ListNotesResponse,
        )
        self.InsertBlock = grpclib.client.UnaryUnaryMethod(
            channel,
            '/noted.notes.v1.NotesAPI/InsertBlock',
            noted.notes.v1.notes_pb2.InsertBlockRequest,
            noted.notes.v1.notes_pb2.InsertBlockResponse,
        )
        self.UpdateBlock = grpclib.client.UnaryUnaryMethod(
            channel,
            '/noted.notes.v1.NotesAPI/UpdateBlock',
            noted.notes.v1.notes_pb2.UpdateBlockRequest,
            noted.notes.v1.notes_pb2.UpdateBlockResponse,
        )
        self.DeleteBlock = grpclib.client.UnaryUnaryMethod(
            channel,
            '/noted.notes.v1.NotesAPI/DeleteBlock',
            noted.notes.v1.notes_pb2.DeleteBlockRequest,
            noted.notes.v1.notes_pb2.DeleteBlockResponse,
        )
