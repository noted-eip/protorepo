// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: noted/notes/v1/groups.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GroupsAPI_CreateGroup_FullMethodName               = "/noted.notes.v1.GroupsAPI/CreateGroup"
	GroupsAPI_CreateWorkspace_FullMethodName           = "/noted.notes.v1.GroupsAPI/CreateWorkspace"
	GroupsAPI_GetGroup_FullMethodName                  = "/noted.notes.v1.GroupsAPI/GetGroup"
	GroupsAPI_UpdateGroup_FullMethodName               = "/noted.notes.v1.GroupsAPI/UpdateGroup"
	GroupsAPI_DeleteGroup_FullMethodName               = "/noted.notes.v1.GroupsAPI/DeleteGroup"
	GroupsAPI_ListGroups_FullMethodName                = "/noted.notes.v1.GroupsAPI/ListGroups"
	GroupsAPI_GetMember_FullMethodName                 = "/noted.notes.v1.GroupsAPI/GetMember"
	GroupsAPI_UpdateMember_FullMethodName              = "/noted.notes.v1.GroupsAPI/UpdateMember"
	GroupsAPI_RemoveMember_FullMethodName              = "/noted.notes.v1.GroupsAPI/RemoveMember"
	GroupsAPI_GetConversation_FullMethodName           = "/noted.notes.v1.GroupsAPI/GetConversation"
	GroupsAPI_UpdateConversation_FullMethodName        = "/noted.notes.v1.GroupsAPI/UpdateConversation"
	GroupsAPI_SendConversationMessage_FullMethodName   = "/noted.notes.v1.GroupsAPI/SendConversationMessage"
	GroupsAPI_GetConversationMessage_FullMethodName    = "/noted.notes.v1.GroupsAPI/GetConversationMessage"
	GroupsAPI_UpdateConversationMessage_FullMethodName = "/noted.notes.v1.GroupsAPI/UpdateConversationMessage"
	GroupsAPI_DeleteConversationMessage_FullMethodName = "/noted.notes.v1.GroupsAPI/DeleteConversationMessage"
	GroupsAPI_ListConversationMessages_FullMethodName  = "/noted.notes.v1.GroupsAPI/ListConversationMessages"
	GroupsAPI_GenerateInviteLink_FullMethodName        = "/noted.notes.v1.GroupsAPI/GenerateInviteLink"
	GroupsAPI_GetInviteLink_FullMethodName             = "/noted.notes.v1.GroupsAPI/GetInviteLink"
	GroupsAPI_RevokeInviteLink_FullMethodName          = "/noted.notes.v1.GroupsAPI/RevokeInviteLink"
	GroupsAPI_UseInviteLink_FullMethodName             = "/noted.notes.v1.GroupsAPI/UseInviteLink"
	GroupsAPI_SendInvite_FullMethodName                = "/noted.notes.v1.GroupsAPI/SendInvite"
	GroupsAPI_GetInvite_FullMethodName                 = "/noted.notes.v1.GroupsAPI/GetInvite"
	GroupsAPI_AcceptInvite_FullMethodName              = "/noted.notes.v1.GroupsAPI/AcceptInvite"
	GroupsAPI_DenyInvite_FullMethodName                = "/noted.notes.v1.GroupsAPI/DenyInvite"
	GroupsAPI_RevokeInvite_FullMethodName              = "/noted.notes.v1.GroupsAPI/RevokeInvite"
	GroupsAPI_ListInvites_FullMethodName               = "/noted.notes.v1.GroupsAPI/ListInvites"
	GroupsAPI_StreamInvites_FullMethodName             = "/noted.notes.v1.GroupsAPI/StreamInvites"
	GroupsAPI_EndStreamInvites_FullMethodName          = "/noted.notes.v1.GroupsAPI/EndStreamInvites"
	GroupsAPI_ListActivities_FullMethodName            = "/noted.notes.v1.GroupsAPI/ListActivities"
	GroupsAPI_GetActivity_FullMethodName               = "/noted.notes.v1.GroupsAPI/GetActivity"
	GroupsAPI_TrackScore_FullMethodName                = "/noted.notes.v1.GroupsAPI/TrackScore"
)

// GroupsAPIClient is the client API for GroupsAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GroupsAPIClient interface {
	// Creates a group with a single administrator member (the authenticated user). Must be authenticated.
	CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*CreateGroupResponse, error)
	// Internal endpoint. Called upon account creation. Creates a workspace for the caller.
	CreateWorkspace(ctx context.Context, in *CreateWorkspaceRequest, opts ...grpc.CallOption) (*CreateWorkspaceResponse, error)
	// Must be group member. If the caller is not a member but has been invited to the group or has an invite code link, it will access a limited view of the group.
	GetGroup(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*GetGroupResponse, error)
	// Must be group administrator.
	UpdateGroup(ctx context.Context, in *UpdateGroupRequest, opts ...grpc.CallOption) (*UpdateGroupResponse, error)
	// Must be group administrator. Deletes all the associated resources (members, notes).
	DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*DeleteGroupResponse, error)
	// Must be group member. Returns only the non-array fields of a group.
	ListGroups(ctx context.Context, in *ListGroupsRequest, opts ...grpc.CallOption) (*ListGroupsResponse, error)
	// Must be group member.
	GetMember(ctx context.Context, in *GetMemberRequest, opts ...grpc.CallOption) (*GetMemberResponse, error)
	// Must be group administrator. Can only update `role`.
	UpdateMember(ctx context.Context, in *UpdateMemberRequest, opts ...grpc.CallOption) (*UpdateMemberResponse, error)
	// Must be group administrator or the authenticated user removing itself from the group.
	RemoveMember(ctx context.Context, in *RemoveMemberRequest, opts ...grpc.CallOption) (*RemoveMemberResponse, error)
	// Must be group member.
	GetConversation(ctx context.Context, in *GetConversationRequest, opts ...grpc.CallOption) (*GetConversationResponse, error)
	// Must be group admin. Can only update `title`.
	UpdateConversation(ctx context.Context, in *UpdateConversationRequest, opts ...grpc.CallOption) (*UpdateConversationResponse, error)
	// Must be group member.
	SendConversationMessage(ctx context.Context, in *SendConversationMessageRequest, opts ...grpc.CallOption) (*SendConversationMessageResponse, error)
	// Must be group member.
	GetConversationMessage(ctx context.Context, in *GetConversationMessageRequest, opts ...grpc.CallOption) (*GetConversationMessageResponse, error)
	// Must be sender. Can only update `content`.
	UpdateConversationMessage(ctx context.Context, in *UpdateConversationMessageRequest, opts ...grpc.CallOption) (*UpdateConversationMessageResponse, error)
	// Must be sender or group admin.
	DeleteConversationMessage(ctx context.Context, in *DeleteConversationMessageRequest, opts ...grpc.CallOption) (*DeleteConversationMessageResponse, error)
	// Must be group member. Messages are sorted in reverse chronological order.
	ListConversationMessages(ctx context.Context, in *ListConversationMessagesRequest, opts ...grpc.CallOption) (*ListConversationMessagesResponse, error)
	// Must be group member. generated_by_account_id defaults to the authenticated user.
	GenerateInviteLink(ctx context.Context, in *GenerateInviteLinkRequest, opts ...grpc.CallOption) (*GenerateInviteLinkResponse, error)
	// Must be group member.
	GetInviteLink(ctx context.Context, in *GetInviteLinkRequest, opts ...grpc.CallOption) (*GetInviteLinkResponse, error)
	// Must be group member.
	RevokeInviteLink(ctx context.Context, in *RevokeInviteLinkRequest, opts ...grpc.CallOption) (*RevokeInviteLinkResponse, error)
	// Must not be group member. Makes the authenticated join the group on success.
	UseInviteLink(ctx context.Context, in *UseInviteLinkRequest, opts ...grpc.CallOption) (*UseInviteLinkResponse, error)
	// The sender defaults to the authenticated user. Must be group member.
	SendInvite(ctx context.Context, in *SendInviteRequest, opts ...grpc.CallOption) (*SendInviteResponse, error)
	// Must be group administrator or sender or recipient.
	GetInvite(ctx context.Context, in *GetInviteRequest, opts ...grpc.CallOption) (*GetInviteResponse, error)
	// Must be recipient. Accepting an invitation automatically adds the recipient to the group and deletes the invite.
	AcceptInvite(ctx context.Context, in *AcceptInviteRequest, opts ...grpc.CallOption) (*AcceptInviteResponse, error)
	// Must be recipient. Deletes the invitation without making the recipient join the group.
	DenyInvite(ctx context.Context, in *DenyInviteRequest, opts ...grpc.CallOption) (*DenyInviteResponse, error)
	// Must be group administrator or sender. Deletes the invitation without making the recipient join the group.
	RevokeInvite(ctx context.Context, in *RevokeInviteRequest, opts ...grpc.CallOption) (*RevokeInviteResponse, error)
	// Must be group administrator or sender or recipient.
	ListInvites(ctx context.Context, in *ListInvitesRequest, opts ...grpc.CallOption) (*ListInvitesResponse, error)
	StreamInvites(ctx context.Context, in *StreamInvitesRequest, opts ...grpc.CallOption) (GroupsAPI_StreamInvitesClient, error)
	EndStreamInvites(ctx context.Context, in *EndStreamInvitesRequest, opts ...grpc.CallOption) (*EndStreamInvitesResponse, error)
	// Must be a group member. List all the activities in a group.
	ListActivities(ctx context.Context, in *ListActivitiesRequest, opts ...grpc.CallOption) (*ListActivitiesResponse, error)
	// Must be a group member. Returns a signle activity in a group.
	GetActivity(ctx context.Context, in *GetActivityRequest, opts ...grpc.CallOption) (*GetActivityResponse, error)
	TrackScore(ctx context.Context, in *TrackScoreRequest, opts ...grpc.CallOption) (*TrackScoreResponse, error)
}

type groupsAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewGroupsAPIClient(cc grpc.ClientConnInterface) GroupsAPIClient {
	return &groupsAPIClient{cc}
}

func (c *groupsAPIClient) CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*CreateGroupResponse, error) {
	out := new(CreateGroupResponse)
	err := c.cc.Invoke(ctx, GroupsAPI_CreateGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsAPIClient) CreateWorkspace(ctx context.Context, in *CreateWorkspaceRequest, opts ...grpc.CallOption) (*CreateWorkspaceResponse, error) {
	out := new(CreateWorkspaceResponse)
	err := c.cc.Invoke(ctx, GroupsAPI_CreateWorkspace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsAPIClient) GetGroup(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*GetGroupResponse, error) {
	out := new(GetGroupResponse)
	err := c.cc.Invoke(ctx, GroupsAPI_GetGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsAPIClient) UpdateGroup(ctx context.Context, in *UpdateGroupRequest, opts ...grpc.CallOption) (*UpdateGroupResponse, error) {
	out := new(UpdateGroupResponse)
	err := c.cc.Invoke(ctx, GroupsAPI_UpdateGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsAPIClient) DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*DeleteGroupResponse, error) {
	out := new(DeleteGroupResponse)
	err := c.cc.Invoke(ctx, GroupsAPI_DeleteGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsAPIClient) ListGroups(ctx context.Context, in *ListGroupsRequest, opts ...grpc.CallOption) (*ListGroupsResponse, error) {
	out := new(ListGroupsResponse)
	err := c.cc.Invoke(ctx, GroupsAPI_ListGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsAPIClient) GetMember(ctx context.Context, in *GetMemberRequest, opts ...grpc.CallOption) (*GetMemberResponse, error) {
	out := new(GetMemberResponse)
	err := c.cc.Invoke(ctx, GroupsAPI_GetMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsAPIClient) UpdateMember(ctx context.Context, in *UpdateMemberRequest, opts ...grpc.CallOption) (*UpdateMemberResponse, error) {
	out := new(UpdateMemberResponse)
	err := c.cc.Invoke(ctx, GroupsAPI_UpdateMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsAPIClient) RemoveMember(ctx context.Context, in *RemoveMemberRequest, opts ...grpc.CallOption) (*RemoveMemberResponse, error) {
	out := new(RemoveMemberResponse)
	err := c.cc.Invoke(ctx, GroupsAPI_RemoveMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsAPIClient) GetConversation(ctx context.Context, in *GetConversationRequest, opts ...grpc.CallOption) (*GetConversationResponse, error) {
	out := new(GetConversationResponse)
	err := c.cc.Invoke(ctx, GroupsAPI_GetConversation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsAPIClient) UpdateConversation(ctx context.Context, in *UpdateConversationRequest, opts ...grpc.CallOption) (*UpdateConversationResponse, error) {
	out := new(UpdateConversationResponse)
	err := c.cc.Invoke(ctx, GroupsAPI_UpdateConversation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsAPIClient) SendConversationMessage(ctx context.Context, in *SendConversationMessageRequest, opts ...grpc.CallOption) (*SendConversationMessageResponse, error) {
	out := new(SendConversationMessageResponse)
	err := c.cc.Invoke(ctx, GroupsAPI_SendConversationMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsAPIClient) GetConversationMessage(ctx context.Context, in *GetConversationMessageRequest, opts ...grpc.CallOption) (*GetConversationMessageResponse, error) {
	out := new(GetConversationMessageResponse)
	err := c.cc.Invoke(ctx, GroupsAPI_GetConversationMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsAPIClient) UpdateConversationMessage(ctx context.Context, in *UpdateConversationMessageRequest, opts ...grpc.CallOption) (*UpdateConversationMessageResponse, error) {
	out := new(UpdateConversationMessageResponse)
	err := c.cc.Invoke(ctx, GroupsAPI_UpdateConversationMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsAPIClient) DeleteConversationMessage(ctx context.Context, in *DeleteConversationMessageRequest, opts ...grpc.CallOption) (*DeleteConversationMessageResponse, error) {
	out := new(DeleteConversationMessageResponse)
	err := c.cc.Invoke(ctx, GroupsAPI_DeleteConversationMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsAPIClient) ListConversationMessages(ctx context.Context, in *ListConversationMessagesRequest, opts ...grpc.CallOption) (*ListConversationMessagesResponse, error) {
	out := new(ListConversationMessagesResponse)
	err := c.cc.Invoke(ctx, GroupsAPI_ListConversationMessages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsAPIClient) GenerateInviteLink(ctx context.Context, in *GenerateInviteLinkRequest, opts ...grpc.CallOption) (*GenerateInviteLinkResponse, error) {
	out := new(GenerateInviteLinkResponse)
	err := c.cc.Invoke(ctx, GroupsAPI_GenerateInviteLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsAPIClient) GetInviteLink(ctx context.Context, in *GetInviteLinkRequest, opts ...grpc.CallOption) (*GetInviteLinkResponse, error) {
	out := new(GetInviteLinkResponse)
	err := c.cc.Invoke(ctx, GroupsAPI_GetInviteLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsAPIClient) RevokeInviteLink(ctx context.Context, in *RevokeInviteLinkRequest, opts ...grpc.CallOption) (*RevokeInviteLinkResponse, error) {
	out := new(RevokeInviteLinkResponse)
	err := c.cc.Invoke(ctx, GroupsAPI_RevokeInviteLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsAPIClient) UseInviteLink(ctx context.Context, in *UseInviteLinkRequest, opts ...grpc.CallOption) (*UseInviteLinkResponse, error) {
	out := new(UseInviteLinkResponse)
	err := c.cc.Invoke(ctx, GroupsAPI_UseInviteLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsAPIClient) SendInvite(ctx context.Context, in *SendInviteRequest, opts ...grpc.CallOption) (*SendInviteResponse, error) {
	out := new(SendInviteResponse)
	err := c.cc.Invoke(ctx, GroupsAPI_SendInvite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsAPIClient) GetInvite(ctx context.Context, in *GetInviteRequest, opts ...grpc.CallOption) (*GetInviteResponse, error) {
	out := new(GetInviteResponse)
	err := c.cc.Invoke(ctx, GroupsAPI_GetInvite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsAPIClient) AcceptInvite(ctx context.Context, in *AcceptInviteRequest, opts ...grpc.CallOption) (*AcceptInviteResponse, error) {
	out := new(AcceptInviteResponse)
	err := c.cc.Invoke(ctx, GroupsAPI_AcceptInvite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsAPIClient) DenyInvite(ctx context.Context, in *DenyInviteRequest, opts ...grpc.CallOption) (*DenyInviteResponse, error) {
	out := new(DenyInviteResponse)
	err := c.cc.Invoke(ctx, GroupsAPI_DenyInvite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsAPIClient) RevokeInvite(ctx context.Context, in *RevokeInviteRequest, opts ...grpc.CallOption) (*RevokeInviteResponse, error) {
	out := new(RevokeInviteResponse)
	err := c.cc.Invoke(ctx, GroupsAPI_RevokeInvite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsAPIClient) ListInvites(ctx context.Context, in *ListInvitesRequest, opts ...grpc.CallOption) (*ListInvitesResponse, error) {
	out := new(ListInvitesResponse)
	err := c.cc.Invoke(ctx, GroupsAPI_ListInvites_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsAPIClient) StreamInvites(ctx context.Context, in *StreamInvitesRequest, opts ...grpc.CallOption) (GroupsAPI_StreamInvitesClient, error) {
	stream, err := c.cc.NewStream(ctx, &GroupsAPI_ServiceDesc.Streams[0], GroupsAPI_StreamInvites_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &groupsAPIStreamInvitesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GroupsAPI_StreamInvitesClient interface {
	Recv() (*StreamInvitesResponse, error)
	grpc.ClientStream
}

type groupsAPIStreamInvitesClient struct {
	grpc.ClientStream
}

func (x *groupsAPIStreamInvitesClient) Recv() (*StreamInvitesResponse, error) {
	m := new(StreamInvitesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *groupsAPIClient) EndStreamInvites(ctx context.Context, in *EndStreamInvitesRequest, opts ...grpc.CallOption) (*EndStreamInvitesResponse, error) {
	out := new(EndStreamInvitesResponse)
	err := c.cc.Invoke(ctx, GroupsAPI_EndStreamInvites_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsAPIClient) ListActivities(ctx context.Context, in *ListActivitiesRequest, opts ...grpc.CallOption) (*ListActivitiesResponse, error) {
	out := new(ListActivitiesResponse)
	err := c.cc.Invoke(ctx, GroupsAPI_ListActivities_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsAPIClient) GetActivity(ctx context.Context, in *GetActivityRequest, opts ...grpc.CallOption) (*GetActivityResponse, error) {
	out := new(GetActivityResponse)
	err := c.cc.Invoke(ctx, GroupsAPI_GetActivity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsAPIClient) TrackScore(ctx context.Context, in *TrackScoreRequest, opts ...grpc.CallOption) (*TrackScoreResponse, error) {
	out := new(TrackScoreResponse)
	err := c.cc.Invoke(ctx, GroupsAPI_TrackScore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupsAPIServer is the server API for GroupsAPI service.
// All implementations must embed UnimplementedGroupsAPIServer
// for forward compatibility
type GroupsAPIServer interface {
	// Creates a group with a single administrator member (the authenticated user). Must be authenticated.
	CreateGroup(context.Context, *CreateGroupRequest) (*CreateGroupResponse, error)
	// Internal endpoint. Called upon account creation. Creates a workspace for the caller.
	CreateWorkspace(context.Context, *CreateWorkspaceRequest) (*CreateWorkspaceResponse, error)
	// Must be group member. If the caller is not a member but has been invited to the group or has an invite code link, it will access a limited view of the group.
	GetGroup(context.Context, *GetGroupRequest) (*GetGroupResponse, error)
	// Must be group administrator.
	UpdateGroup(context.Context, *UpdateGroupRequest) (*UpdateGroupResponse, error)
	// Must be group administrator. Deletes all the associated resources (members, notes).
	DeleteGroup(context.Context, *DeleteGroupRequest) (*DeleteGroupResponse, error)
	// Must be group member. Returns only the non-array fields of a group.
	ListGroups(context.Context, *ListGroupsRequest) (*ListGroupsResponse, error)
	// Must be group member.
	GetMember(context.Context, *GetMemberRequest) (*GetMemberResponse, error)
	// Must be group administrator. Can only update `role`.
	UpdateMember(context.Context, *UpdateMemberRequest) (*UpdateMemberResponse, error)
	// Must be group administrator or the authenticated user removing itself from the group.
	RemoveMember(context.Context, *RemoveMemberRequest) (*RemoveMemberResponse, error)
	// Must be group member.
	GetConversation(context.Context, *GetConversationRequest) (*GetConversationResponse, error)
	// Must be group admin. Can only update `title`.
	UpdateConversation(context.Context, *UpdateConversationRequest) (*UpdateConversationResponse, error)
	// Must be group member.
	SendConversationMessage(context.Context, *SendConversationMessageRequest) (*SendConversationMessageResponse, error)
	// Must be group member.
	GetConversationMessage(context.Context, *GetConversationMessageRequest) (*GetConversationMessageResponse, error)
	// Must be sender. Can only update `content`.
	UpdateConversationMessage(context.Context, *UpdateConversationMessageRequest) (*UpdateConversationMessageResponse, error)
	// Must be sender or group admin.
	DeleteConversationMessage(context.Context, *DeleteConversationMessageRequest) (*DeleteConversationMessageResponse, error)
	// Must be group member. Messages are sorted in reverse chronological order.
	ListConversationMessages(context.Context, *ListConversationMessagesRequest) (*ListConversationMessagesResponse, error)
	// Must be group member. generated_by_account_id defaults to the authenticated user.
	GenerateInviteLink(context.Context, *GenerateInviteLinkRequest) (*GenerateInviteLinkResponse, error)
	// Must be group member.
	GetInviteLink(context.Context, *GetInviteLinkRequest) (*GetInviteLinkResponse, error)
	// Must be group member.
	RevokeInviteLink(context.Context, *RevokeInviteLinkRequest) (*RevokeInviteLinkResponse, error)
	// Must not be group member. Makes the authenticated join the group on success.
	UseInviteLink(context.Context, *UseInviteLinkRequest) (*UseInviteLinkResponse, error)
	// The sender defaults to the authenticated user. Must be group member.
	SendInvite(context.Context, *SendInviteRequest) (*SendInviteResponse, error)
	// Must be group administrator or sender or recipient.
	GetInvite(context.Context, *GetInviteRequest) (*GetInviteResponse, error)
	// Must be recipient. Accepting an invitation automatically adds the recipient to the group and deletes the invite.
	AcceptInvite(context.Context, *AcceptInviteRequest) (*AcceptInviteResponse, error)
	// Must be recipient. Deletes the invitation without making the recipient join the group.
	DenyInvite(context.Context, *DenyInviteRequest) (*DenyInviteResponse, error)
	// Must be group administrator or sender. Deletes the invitation without making the recipient join the group.
	RevokeInvite(context.Context, *RevokeInviteRequest) (*RevokeInviteResponse, error)
	// Must be group administrator or sender or recipient.
	ListInvites(context.Context, *ListInvitesRequest) (*ListInvitesResponse, error)
	StreamInvites(*StreamInvitesRequest, GroupsAPI_StreamInvitesServer) error
	EndStreamInvites(context.Context, *EndStreamInvitesRequest) (*EndStreamInvitesResponse, error)
	// Must be a group member. List all the activities in a group.
	ListActivities(context.Context, *ListActivitiesRequest) (*ListActivitiesResponse, error)
	// Must be a group member. Returns a signle activity in a group.
	GetActivity(context.Context, *GetActivityRequest) (*GetActivityResponse, error)
	TrackScore(context.Context, *TrackScoreRequest) (*TrackScoreResponse, error)
	mustEmbedUnimplementedGroupsAPIServer()
}

// UnimplementedGroupsAPIServer must be embedded to have forward compatible implementations.
type UnimplementedGroupsAPIServer struct {
}

func (UnimplementedGroupsAPIServer) CreateGroup(context.Context, *CreateGroupRequest) (*CreateGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedGroupsAPIServer) CreateWorkspace(context.Context, *CreateWorkspaceRequest) (*CreateWorkspaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorkspace not implemented")
}
func (UnimplementedGroupsAPIServer) GetGroup(context.Context, *GetGroupRequest) (*GetGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroup not implemented")
}
func (UnimplementedGroupsAPIServer) UpdateGroup(context.Context, *UpdateGroupRequest) (*UpdateGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroup not implemented")
}
func (UnimplementedGroupsAPIServer) DeleteGroup(context.Context, *DeleteGroupRequest) (*DeleteGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (UnimplementedGroupsAPIServer) ListGroups(context.Context, *ListGroupsRequest) (*ListGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGroups not implemented")
}
func (UnimplementedGroupsAPIServer) GetMember(context.Context, *GetMemberRequest) (*GetMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMember not implemented")
}
func (UnimplementedGroupsAPIServer) UpdateMember(context.Context, *UpdateMemberRequest) (*UpdateMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMember not implemented")
}
func (UnimplementedGroupsAPIServer) RemoveMember(context.Context, *RemoveMemberRequest) (*RemoveMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMember not implemented")
}
func (UnimplementedGroupsAPIServer) GetConversation(context.Context, *GetConversationRequest) (*GetConversationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConversation not implemented")
}
func (UnimplementedGroupsAPIServer) UpdateConversation(context.Context, *UpdateConversationRequest) (*UpdateConversationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConversation not implemented")
}
func (UnimplementedGroupsAPIServer) SendConversationMessage(context.Context, *SendConversationMessageRequest) (*SendConversationMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendConversationMessage not implemented")
}
func (UnimplementedGroupsAPIServer) GetConversationMessage(context.Context, *GetConversationMessageRequest) (*GetConversationMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConversationMessage not implemented")
}
func (UnimplementedGroupsAPIServer) UpdateConversationMessage(context.Context, *UpdateConversationMessageRequest) (*UpdateConversationMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConversationMessage not implemented")
}
func (UnimplementedGroupsAPIServer) DeleteConversationMessage(context.Context, *DeleteConversationMessageRequest) (*DeleteConversationMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConversationMessage not implemented")
}
func (UnimplementedGroupsAPIServer) ListConversationMessages(context.Context, *ListConversationMessagesRequest) (*ListConversationMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConversationMessages not implemented")
}
func (UnimplementedGroupsAPIServer) GenerateInviteLink(context.Context, *GenerateInviteLinkRequest) (*GenerateInviteLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateInviteLink not implemented")
}
func (UnimplementedGroupsAPIServer) GetInviteLink(context.Context, *GetInviteLinkRequest) (*GetInviteLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInviteLink not implemented")
}
func (UnimplementedGroupsAPIServer) RevokeInviteLink(context.Context, *RevokeInviteLinkRequest) (*RevokeInviteLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeInviteLink not implemented")
}
func (UnimplementedGroupsAPIServer) UseInviteLink(context.Context, *UseInviteLinkRequest) (*UseInviteLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UseInviteLink not implemented")
}
func (UnimplementedGroupsAPIServer) SendInvite(context.Context, *SendInviteRequest) (*SendInviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendInvite not implemented")
}
func (UnimplementedGroupsAPIServer) GetInvite(context.Context, *GetInviteRequest) (*GetInviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvite not implemented")
}
func (UnimplementedGroupsAPIServer) AcceptInvite(context.Context, *AcceptInviteRequest) (*AcceptInviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptInvite not implemented")
}
func (UnimplementedGroupsAPIServer) DenyInvite(context.Context, *DenyInviteRequest) (*DenyInviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DenyInvite not implemented")
}
func (UnimplementedGroupsAPIServer) RevokeInvite(context.Context, *RevokeInviteRequest) (*RevokeInviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeInvite not implemented")
}
func (UnimplementedGroupsAPIServer) ListInvites(context.Context, *ListInvitesRequest) (*ListInvitesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInvites not implemented")
}
func (UnimplementedGroupsAPIServer) StreamInvites(*StreamInvitesRequest, GroupsAPI_StreamInvitesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamInvites not implemented")
}
func (UnimplementedGroupsAPIServer) EndStreamInvites(context.Context, *EndStreamInvitesRequest) (*EndStreamInvitesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndStreamInvites not implemented")
}
func (UnimplementedGroupsAPIServer) ListActivities(context.Context, *ListActivitiesRequest) (*ListActivitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListActivities not implemented")
}
func (UnimplementedGroupsAPIServer) GetActivity(context.Context, *GetActivityRequest) (*GetActivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActivity not implemented")
}
func (UnimplementedGroupsAPIServer) TrackScore(context.Context, *TrackScoreRequest) (*TrackScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrackScore not implemented")
}
func (UnimplementedGroupsAPIServer) mustEmbedUnimplementedGroupsAPIServer() {}

// UnsafeGroupsAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GroupsAPIServer will
// result in compilation errors.
type UnsafeGroupsAPIServer interface {
	mustEmbedUnimplementedGroupsAPIServer()
}

func RegisterGroupsAPIServer(s grpc.ServiceRegistrar, srv GroupsAPIServer) {
	s.RegisterService(&GroupsAPI_ServiceDesc, srv)
}

func _GroupsAPI_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsAPIServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupsAPI_CreateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsAPIServer).CreateGroup(ctx, req.(*CreateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupsAPI_CreateWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWorkspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsAPIServer).CreateWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupsAPI_CreateWorkspace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsAPIServer).CreateWorkspace(ctx, req.(*CreateWorkspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupsAPI_GetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsAPIServer).GetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupsAPI_GetGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsAPIServer).GetGroup(ctx, req.(*GetGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupsAPI_UpdateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsAPIServer).UpdateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupsAPI_UpdateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsAPIServer).UpdateGroup(ctx, req.(*UpdateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupsAPI_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsAPIServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupsAPI_DeleteGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsAPIServer).DeleteGroup(ctx, req.(*DeleteGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupsAPI_ListGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsAPIServer).ListGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupsAPI_ListGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsAPIServer).ListGroups(ctx, req.(*ListGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupsAPI_GetMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsAPIServer).GetMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupsAPI_GetMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsAPIServer).GetMember(ctx, req.(*GetMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupsAPI_UpdateMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsAPIServer).UpdateMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupsAPI_UpdateMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsAPIServer).UpdateMember(ctx, req.(*UpdateMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupsAPI_RemoveMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsAPIServer).RemoveMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupsAPI_RemoveMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsAPIServer).RemoveMember(ctx, req.(*RemoveMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupsAPI_GetConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsAPIServer).GetConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupsAPI_GetConversation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsAPIServer).GetConversation(ctx, req.(*GetConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupsAPI_UpdateConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsAPIServer).UpdateConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupsAPI_UpdateConversation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsAPIServer).UpdateConversation(ctx, req.(*UpdateConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupsAPI_SendConversationMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendConversationMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsAPIServer).SendConversationMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupsAPI_SendConversationMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsAPIServer).SendConversationMessage(ctx, req.(*SendConversationMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupsAPI_GetConversationMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConversationMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsAPIServer).GetConversationMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupsAPI_GetConversationMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsAPIServer).GetConversationMessage(ctx, req.(*GetConversationMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupsAPI_UpdateConversationMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConversationMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsAPIServer).UpdateConversationMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupsAPI_UpdateConversationMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsAPIServer).UpdateConversationMessage(ctx, req.(*UpdateConversationMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupsAPI_DeleteConversationMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConversationMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsAPIServer).DeleteConversationMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupsAPI_DeleteConversationMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsAPIServer).DeleteConversationMessage(ctx, req.(*DeleteConversationMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupsAPI_ListConversationMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConversationMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsAPIServer).ListConversationMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupsAPI_ListConversationMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsAPIServer).ListConversationMessages(ctx, req.(*ListConversationMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupsAPI_GenerateInviteLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateInviteLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsAPIServer).GenerateInviteLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupsAPI_GenerateInviteLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsAPIServer).GenerateInviteLink(ctx, req.(*GenerateInviteLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupsAPI_GetInviteLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInviteLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsAPIServer).GetInviteLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupsAPI_GetInviteLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsAPIServer).GetInviteLink(ctx, req.(*GetInviteLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupsAPI_RevokeInviteLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeInviteLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsAPIServer).RevokeInviteLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupsAPI_RevokeInviteLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsAPIServer).RevokeInviteLink(ctx, req.(*RevokeInviteLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupsAPI_UseInviteLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UseInviteLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsAPIServer).UseInviteLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupsAPI_UseInviteLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsAPIServer).UseInviteLink(ctx, req.(*UseInviteLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupsAPI_SendInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsAPIServer).SendInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupsAPI_SendInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsAPIServer).SendInvite(ctx, req.(*SendInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupsAPI_GetInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsAPIServer).GetInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupsAPI_GetInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsAPIServer).GetInvite(ctx, req.(*GetInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupsAPI_AcceptInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsAPIServer).AcceptInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupsAPI_AcceptInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsAPIServer).AcceptInvite(ctx, req.(*AcceptInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupsAPI_DenyInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DenyInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsAPIServer).DenyInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupsAPI_DenyInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsAPIServer).DenyInvite(ctx, req.(*DenyInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupsAPI_RevokeInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsAPIServer).RevokeInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupsAPI_RevokeInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsAPIServer).RevokeInvite(ctx, req.(*RevokeInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupsAPI_ListInvites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInvitesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsAPIServer).ListInvites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupsAPI_ListInvites_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsAPIServer).ListInvites(ctx, req.(*ListInvitesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupsAPI_StreamInvites_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamInvitesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GroupsAPIServer).StreamInvites(m, &groupsAPIStreamInvitesServer{stream})
}

type GroupsAPI_StreamInvitesServer interface {
	Send(*StreamInvitesResponse) error
	grpc.ServerStream
}

type groupsAPIStreamInvitesServer struct {
	grpc.ServerStream
}

func (x *groupsAPIStreamInvitesServer) Send(m *StreamInvitesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GroupsAPI_EndStreamInvites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndStreamInvitesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsAPIServer).EndStreamInvites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupsAPI_EndStreamInvites_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsAPIServer).EndStreamInvites(ctx, req.(*EndStreamInvitesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupsAPI_ListActivities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListActivitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsAPIServer).ListActivities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupsAPI_ListActivities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsAPIServer).ListActivities(ctx, req.(*ListActivitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupsAPI_GetActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsAPIServer).GetActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupsAPI_GetActivity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsAPIServer).GetActivity(ctx, req.(*GetActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupsAPI_TrackScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsAPIServer).TrackScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupsAPI_TrackScore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsAPIServer).TrackScore(ctx, req.(*TrackScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GroupsAPI_ServiceDesc is the grpc.ServiceDesc for GroupsAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GroupsAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "noted.notes.v1.GroupsAPI",
	HandlerType: (*GroupsAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGroup",
			Handler:    _GroupsAPI_CreateGroup_Handler,
		},
		{
			MethodName: "CreateWorkspace",
			Handler:    _GroupsAPI_CreateWorkspace_Handler,
		},
		{
			MethodName: "GetGroup",
			Handler:    _GroupsAPI_GetGroup_Handler,
		},
		{
			MethodName: "UpdateGroup",
			Handler:    _GroupsAPI_UpdateGroup_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _GroupsAPI_DeleteGroup_Handler,
		},
		{
			MethodName: "ListGroups",
			Handler:    _GroupsAPI_ListGroups_Handler,
		},
		{
			MethodName: "GetMember",
			Handler:    _GroupsAPI_GetMember_Handler,
		},
		{
			MethodName: "UpdateMember",
			Handler:    _GroupsAPI_UpdateMember_Handler,
		},
		{
			MethodName: "RemoveMember",
			Handler:    _GroupsAPI_RemoveMember_Handler,
		},
		{
			MethodName: "GetConversation",
			Handler:    _GroupsAPI_GetConversation_Handler,
		},
		{
			MethodName: "UpdateConversation",
			Handler:    _GroupsAPI_UpdateConversation_Handler,
		},
		{
			MethodName: "SendConversationMessage",
			Handler:    _GroupsAPI_SendConversationMessage_Handler,
		},
		{
			MethodName: "GetConversationMessage",
			Handler:    _GroupsAPI_GetConversationMessage_Handler,
		},
		{
			MethodName: "UpdateConversationMessage",
			Handler:    _GroupsAPI_UpdateConversationMessage_Handler,
		},
		{
			MethodName: "DeleteConversationMessage",
			Handler:    _GroupsAPI_DeleteConversationMessage_Handler,
		},
		{
			MethodName: "ListConversationMessages",
			Handler:    _GroupsAPI_ListConversationMessages_Handler,
		},
		{
			MethodName: "GenerateInviteLink",
			Handler:    _GroupsAPI_GenerateInviteLink_Handler,
		},
		{
			MethodName: "GetInviteLink",
			Handler:    _GroupsAPI_GetInviteLink_Handler,
		},
		{
			MethodName: "RevokeInviteLink",
			Handler:    _GroupsAPI_RevokeInviteLink_Handler,
		},
		{
			MethodName: "UseInviteLink",
			Handler:    _GroupsAPI_UseInviteLink_Handler,
		},
		{
			MethodName: "SendInvite",
			Handler:    _GroupsAPI_SendInvite_Handler,
		},
		{
			MethodName: "GetInvite",
			Handler:    _GroupsAPI_GetInvite_Handler,
		},
		{
			MethodName: "AcceptInvite",
			Handler:    _GroupsAPI_AcceptInvite_Handler,
		},
		{
			MethodName: "DenyInvite",
			Handler:    _GroupsAPI_DenyInvite_Handler,
		},
		{
			MethodName: "RevokeInvite",
			Handler:    _GroupsAPI_RevokeInvite_Handler,
		},
		{
			MethodName: "ListInvites",
			Handler:    _GroupsAPI_ListInvites_Handler,
		},
		{
			MethodName: "EndStreamInvites",
			Handler:    _GroupsAPI_EndStreamInvites_Handler,
		},
		{
			MethodName: "ListActivities",
			Handler:    _GroupsAPI_ListActivities_Handler,
		},
		{
			MethodName: "GetActivity",
			Handler:    _GroupsAPI_GetActivity_Handler,
		},
		{
			MethodName: "TrackScore",
			Handler:    _GroupsAPI_TrackScore_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamInvites",
			Handler:       _GroupsAPI_StreamInvites_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "noted/notes/v1/groups.proto",
}
