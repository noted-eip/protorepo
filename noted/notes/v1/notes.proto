syntax = "proto3";

package noted.notes.v1;

option go_package = "noted/notes/v1";

import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "google/api/field_behavior.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
    info: {
        title: "Noted API Documentation";
        version: "1.0";
    }
    security: {
		security_requirement: {
			key: "bearerAuth";
			value: {};
		}
	}
    responses: {
		key: "404";
		value: {
			description: "Resource not found or lacking permissions to access the resource.";
			schema: {
				json_schema: {
                    ref: ".noted.common.v1.HttpError"
				}
			}
		}
	}
};

message Note {
    string id = 1 [(google.api.field_behavior) = REQUIRED];
    string group_id = 2 [(google.api.field_behavior) = REQUIRED];
    string author_account_id = 3 [(google.api.field_behavior) = REQUIRED];
    string title = 4 [(google.api.field_behavior) = REQUIRED];
    repeated Block blocks = 5;
    google.protobuf.Timestamp created_at = 6 [(google.api.field_behavior) = REQUIRED];
    google.protobuf.Timestamp modified_at = 7;
    google.protobuf.Timestamp analyzed_at = 8;
}

message Block {
    string id = 1 [(google.api.field_behavior) = REQUIRED];

    enum Type {
        TYPE_INVALID = 0;
        TYPE_HEADING_1 = 1;
        TYPE_HEADING_2 = 2;
        TYPE_HEADING_3 = 3;
        TYPE_PARAGRAPH = 4;
        TYPE_MATH = 5;
        TYPE_CODE = 6;
        TYPE_BULLET_POINT = 7;
        TYPE_NUMBER_POINT = 8;
        TYPE_IMAGE = 9;
    }
    Type type = 2 [(google.api.field_behavior) = REQUIRED];

    message Code {
        string snippet = 1;
        string lang = 2;
    }

    message Image {
        string url = 1;
        string caption = 2;
    }


    message TextStyle {
        enum Style {
            STYLE_INVALID = 0;
            STYLE_BG_COLOR = 1;
            STYLE_TXT_COLOR = 2;
            STYLE_BOLD = 3;
            STYLE_ITALIC = 4;
            STYLE_UNDERLINE = 5;
        }
        Style style = 1;

        message Position {
            int64 start = 1;
            int64 length = 2;
        }
        Position pos = 2;

        message Color {
            int32 r = 1;
            int32 g = 2;
            int32 b = 3;
        }
        optional Color color = 3;
    }
    repeated TextStyle styles = 19;

    oneof data {
        string heading = 3;
        string paragraph = 4;
        string number_point = 5;
        string bullet_point = 6;
        Image image = 16;
        Code code = 17;
        string math = 18;
    }

    message Comment {
        string id = 1;
        string author_id = 2;
        string content = 3;
    }
    repeated Comment thread = 20;

    reserved 7, 8, 9, 10, 11, 12, 13, 14;
}

message QuizQuestion {
    string question = 1;
    repeated string answers = 2;
    repeated string solutions = 3;
}

message Quiz {
    repeated QuizQuestion questions = 1;
}

enum NoteExportFormat {
    NOTE_EXPORT_FORMAT_INVALID = 0;
    NOTE_EXPORT_FORMAT_MARKDOWN = 1;
    NOTE_EXPORT_FORMAT_PDF = 2;
}

service NotesAPI {
    // Must be group member, author_account_id defaults to the user making the request. Create a new note in database.
    rpc CreateNote(CreateNoteRequest) returns (CreateNoteResponse) {
        option (google.api.http) = {
            post: "/groups/{group_id}/notes",
            body: "*",
        };
    }
    // Must be group member or author. Return a note from id provided.
    rpc GetNote(GetNoteRequest) returns (GetNoteResponse) {
        option (google.api.http) = {
            get: "/groups/{group_id}/notes/{note_id}"
        };
    }
    // Must be author. Can only update `title` or `blocks`.
    rpc UpdateNote(UpdateNoteRequest) returns (UpdateNoteResponse) {
        option (google.api.http) = {
            patch: "/groups/{group_id}/notes/{note_id}",
            body: "note",
        };
    }

    // Must be author. Delete a single note in database. 
    rpc DeleteNote(DeleteNoteRequest) returns (DeleteNoteResponse) {
        option (google.api.http) = {
            delete: "/groups/{group_id}/notes/{note_id}"
        };
    }

    // List notes in a group, authored by a user or both. Must have read access to the notes.
    rpc ListNotes(ListNotesRequest) returns (ListNotesResponse) {
        option (google.api.http) = {
            get: "/notes",
            additional_bindings: [
                {
                    get: "/groups/{group_id}/notes"
                }
            ]
        };
    }

    // Must be author. Insert a block of content in a note at a specific index.
    rpc InsertBlock(InsertBlockRequest) returns (InsertBlockResponse) {
        option (google.api.http) = {
            post: "/groups/{group_id}/notes/{note_id}/blocks",
            body: "*",
        };
    }
    // Must be author. Update a block content.
    rpc UpdateBlock(UpdateBlockRequest) returns (UpdateBlockResponse) {
        option (google.api.http) = {
            patch: "/groups/{group_id}/notes/{note_id}/blocks/{block_id}",
            body: "block",
        };
    }
    // Must be author. Update a block index.
    rpc UpdateBlockIndex(UpdateBlockIndexRequest) returns (UpdateBlockIndexResponse) {
        option (google.api.http) = {
            post: "/groups/{group_id}/notes/{note_id}/blocks/{block_id}/index",
            body: "*",
        };
    }
    // Must be author. Delete a block in a note and replace the indexes of the others.
    rpc DeleteBlock(DeleteBlockRequest) returns (DeleteBlockResponse) {
        option (google.api.http) = {
            delete: "/groups/{group_id}/notes/{note_id}/blocks/{block_id}"
        };
    }


    // Must be group member. Returns a md or pdf dowloadable file.
    rpc ExportNote(ExportNoteRequest) returns (ExportNoteResponse) {}

    // Must be account owner. Delete the account related notes and groups.
    rpc OnAccountDelete(OnAccountDeleteRequest) returns (OnAccountDeleteResponse) {}

    rpc ChangeNoteEditPermission(ChangeNoteEditPermissionRequest) returns (ChangeNoteEditPermissionResponse) {
        option (google.api.http) = {
            post: "/groups/{group_id}/notes/{note_id}/permission",
            body: "*"
        };
    }

    rpc GenerateQuiz(GenerateQuizRequest) returns (GenerateQuizResponse) {
        option (google.api.http) = {
            get: "/groups/{group_id}/notes/{note_id}/quiz"
        };
    }

    rpc GenerateSummary(GenerateSummaryRequest) returns (GenerateSummaryResponse) {
        option (google.api.http) = {
            get: "/groups/{group_id}/notes/{note_id}/sumary"
        };
    }

    rpc CreateBlockComment(CreateBlockCommentRequest) returns (CreateBlockCommentResponse) {
        option (google.api.http) = {
            post: "/groups/{group_id}/notes/{note_id}/{block_id}/comment"
            body: "*"
        };
    }

    rpc ListBlockComments(ListBlockCommentsRequest) returns (ListBlockCommentsResponse) {
        option (google.api.http) = {
            get: "/groups/{group_id}/notes/{note_id}/{block_id}/comments"
        };
    }

    rpc DeleteBlockComment(DeleteBlockCommentRequest) returns (DeleteBlockCommentResponse) {
        option (google.api.http) = {
            delete: "/groups/{group_id}/notes/{note_id}/{block_id}/comment/{comment_id}"
        };
    }

}

message GetNoteRequest {
    string group_id = 1;
    string note_id = 2;
}

message GetNoteResponse {
    Note note = 1 [(google.api.field_behavior) = REQUIRED];
}

message CreateNoteRequest {
    string group_id = 1;
    string title = 2;
    repeated Block blocks = 3;
}

message CreateNoteResponse {
    Note note = 1 [(google.api.field_behavior) = REQUIRED];
}

message UpdateNoteRequest {
    string group_id = 1;
    string note_id = 2;
    Note note = 3 [(google.api.field_behavior) = REQUIRED];
    google.protobuf.FieldMask update_mask = 4;
}

message UpdateNoteResponse {
    Note note = 1 [(google.api.field_behavior) = REQUIRED];
}

message DeleteNoteRequest {
    string group_id = 1;
    string note_id = 2;
}

message DeleteNoteResponse {
}

message ListNotesRequest {
    string author_account_id = 1;
    string group_id = 2;
    int32 limit = 3;
    int32 offset = 4;
}

message ListNotesResponse {
    repeated Note notes = 1;
}

message InsertBlockRequest {
    string group_id = 1;
    string note_id = 2;
    uint32 index = 3 [(google.api.field_behavior) = REQUIRED];
    Block block = 4 [(google.api.field_behavior) = REQUIRED];
}

message InsertBlockResponse {
    Block block = 1 [(google.api.field_behavior) = REQUIRED];
}

message UpdateBlockRequest {
    string group_id = 1;
    string note_id = 2;
    string block_id = 3;
    Block block = 4 [(google.api.field_behavior) = REQUIRED];
}

message UpdateBlockResponse {
    Block block = 1 [(google.api.field_behavior) = REQUIRED];
}

message UpdateBlockIndexRequest {
    string group_id = 1;
    string note_id = 2;
    string block_id = 3;
    uint32 index = 4 [(google.api.field_behavior) = REQUIRED];
}

message UpdateBlockIndexResponse {
    Block block = 1 [(google.api.field_behavior) = REQUIRED];
}

message DeleteBlockRequest {
    string group_id = 1;
    string note_id = 2;
    string block_id = 3;
}

message DeleteBlockResponse {
}

message ExportNoteRequest {
    string group_id = 1;
    string note_id = 2;
    NoteExportFormat export_format = 3 [(google.api.field_behavior) = REQUIRED];
}

message ExportNoteResponse {
    bytes file = 1 [(google.api.field_behavior) = REQUIRED];
}

message OnAccountDeleteRequest {}

message OnAccountDeleteResponse {}

message ChangeNoteEditPermissionRequest {
    string group_id = 1;
    string note_id = 2;
    string recipient_account_id = 3 [(google.api.field_behavior) = REQUIRED];
    
    enum Action {
        ACTION_INVALID = 0;
        ACTION_GRANT = 1; 
        ACTION_REMOVE = 2;
    }
    Action type = 4;
}

message ChangeNoteEditPermissionResponse {}

message GenerateQuizRequest {
    string group_id = 1;
    string note_id = 2;
}

message GenerateQuizResponse {
    Quiz quiz = 1;
}

message GenerateSummaryRequest {
    string group_id = 1;
    string note_id = 2;
}

message GenerateSummaryResponse {
    string summary = 1;
}

message CreateBlockCommentRequest {
    string group_id = 1 [(google.api.field_behavior) = REQUIRED];
    string note_id = 2 [(google.api.field_behavior) = REQUIRED];
    string block_id = 3 [(google.api.field_behavior) = REQUIRED];
    Block.Comment comment = 4 [(google.api.field_behavior) = REQUIRED];
}

message CreateBlockCommentResponse {
    Block.Comment comment = 1;
}

message ListBlockCommentsRequest {
    string group_id = 1 [(google.api.field_behavior) = REQUIRED];
    string note_id = 2 [(google.api.field_behavior) = REQUIRED];
    string block_id = 3 [(google.api.field_behavior) = REQUIRED];
}

message ListBlockCommentsResponse {
    repeated Block.Comment comments = 1;
}

message DeleteBlockCommentRequest {
    string group_id = 1 [(google.api.field_behavior) = REQUIRED];
    string note_id = 2 [(google.api.field_behavior) = REQUIRED];
    string block_id = 3 [(google.api.field_behavior) = REQUIRED];
    string comment_id = 4 [(google.api.field_behavior) = REQUIRED];
}

message DeleteBlockCommentResponse {
}
