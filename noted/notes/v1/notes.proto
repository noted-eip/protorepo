syntax = "proto3";

package noted.notes.v1;

option go_package = "noted/notes/v1";

import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";

message Note {
    string id = 1;
    string group_id = 2;
    string author_id = 3;
    string title = 4;
    repeated Block blocks = 5;
    google.protobuf.Timestamp created_at = 6;
    google.protobuf.Timestamp modified_at = 7;
}

message Block {
    string id = 1;

    enum Type {
        TYPE_INVALID = 0;
        TYPE_HEADING_1 = 1;
        TYPE_HEADING_2 = 2;
        TYPE_HEADING_3 = 3;
        TYPE_PARAGRAPH = 4;
        TYPE_MATH = 5;
        TYPE_CODE = 6;
        TYPE_BULLET_POINT = 7;
        TYPE_NUMBERED_POINT = 8;
        TYPE_IMAGE = 9;
    }
    Type type = 2;

    message Code {
        string snippet = 1;
        string lang = 2;
    }

    message Image {
        string url = 1;
        string caption = 2;
    }

    oneof data {
        string heading = 3;
        string paragraph = 4;
        string number_point = 5;
        string bullet_point = 6;
        Image image = 16;
        Code code = 17;
        string math = 18;
    }

    reserved 7, 8, 9, 10, 11, 12, 13, 14;
}

enum NoteExportFormat {
    NOTE_EXPORT_FORMAT_INVALID = 0;
    NOTE_EXPORT_FORMAT_MARKDOWN = 1;
    NOTE_EXPORT_FORMAT_PDF = 2;
}

service NotesAPI {
    // Must be group member, author_account_id defaults to the user making
    // the request.
    rpc CreateNote(CreateNoteRequest) returns (CreateNoteResponse) {}
    // Must be group member or author.
    rpc GetNote(GetNoteRequest) returns (GetNoteResponse) {}
    // Must be author. Can only update `title`.
    rpc UpdateNote(UpdateNoteRequest) returns (UpdateNoteResponse) {}
    // Must be author.
    rpc DeleteNote(DeleteNoteRequest) returns (DeleteNoteResponse) {}
    // Must be group member.
    rpc ListNotes(ListNotesRequest) returns (ListNotesResponse) {}

    // Must be author.
    rpc InsertBlock(InsertBlockRequest) returns (InsertBlockResponse) {}
    // Must be author.
    rpc UpdateBlock(UpdateBlockRequest) returns (UpdateBlockResponse) {}
    // Must be author.
    rpc DeleteBlock(DeleteBlockRequest) returns (DeleteBlockResponse) {}

    // Must be group member.
    rpc ExportNote(ExportNoteRequest) returns (ExportNoteResponse) {}
}

message GetNoteRequest {
    string group_id = 1;
    string note_id = 2;
}

message GetNoteResponse {
    Note note = 1;
}

message CreateNoteRequest {
    string group_id = 1;
    string title = 2;
    repeated Block blocks = 3;
}

message CreateNoteResponse {
    Note note = 1;
}

message UpdateNoteRequest {
    string group_id = 1;
    string note_id = 2;
    Note note = 3;
    google.protobuf.FieldMask update_mask = 4;
}

message UpdateNoteResponse {
    string id = 1;
}

message DeleteNoteRequest {
    string id = 1;
}

message DeleteNoteResponse {
}

message ListNotesRequest {
    string author_id = 1;
    string group_id = 2;
}

message ListNotesResponse {
    repeated Note notes = 1;
}

message InsertBlockRequest {
    string group_id = 1;
    string note_id = 2;
    uint32 index = 3;
    Block block = 4;
}

message InsertBlockResponse {
    Block block = 1;
}

message UpdateBlockRequest {
    string id = 1;
    Block block = 2;
    uint32 index = 3;
    google.protobuf.FieldMask update_mask = 4;
}

message UpdateBlockResponse {
    Block block = 1;
}

message DeleteBlockRequest {
    string id = 1;
}

message DeleteBlockResponse {

}

message ExportNoteRequest {
    string note_id = 1;
    NoteExportFormat export_format = 2;
}

message ExportNoteResponse {
    bytes file = 1;
}
