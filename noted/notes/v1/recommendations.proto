syntax = "proto3";

package noted.notes.v1;

option go_package = "noted/notes/v1";

import "protoc-gen-openapiv2/options/annotations.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
    info: {
        title: "Noted API Documentation";
        version: "1.0";
    }
    security: {
		security_requirement: {
			key: "bearerAuth";
			value: {};
		}
	}
    responses: {
		key: "404";
		value: {
			description: "Resource not found or lacking permissions to access the resource.";
			schema: {
				json_schema: {
                    ref: ".noted.common.v1.HttpError"
				}
			}
		}
	}
};

message Widget {
    oneof type {
        WebsiteWidget website_widget = 1;
        ImageWidget image_widget = 2;
        DefinitionWidget definition_widget = 3;
    }
}

message WebsiteWidget {
    string title = 1 [(google.api.field_behavior) = REQUIRED];
    string url = 2 [(google.api.field_behavior) = REQUIRED];
    string description = 3;
}

message ImageWidget {
    string title = 1 [(google.api.field_behavior) = REQUIRED];
    string url = 2 [(google.api.field_behavior) = REQUIRED];
    string caption = 3;
}

message DefinitionWidget {
    string word = 1 [(google.api.field_behavior) = REQUIRED];
    string gender = 2;
    string type = 3;
    string content = 4 [(google.api.field_behavior) = REQUIRED];
}

service RecommendationsAPI {
    rpc GenerateWidgets(GenerateWidgetsRequest) returns (GenerateWidgetsResponse) {
        option (google.api.http) = {
            get: "/groups/{group_id}/notes/{note_id}/widgets"
        };
    }
}

message GenerateWidgetsRequest {
    string group_id = 1;
    string note_id = 2;
}

message GenerateWidgetsResponse {
    repeated Widget widgets = 1 [(google.api.field_behavior) = REQUIRED];
}
