# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: noted/recommendations/v1/recommendations.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n.noted/recommendations/v1/recommendations.proto\x12\x18noted.recommendations.v1\"2\n\x16\x45xtractKeywordsRequest\x12\x18\n\x07\x63ontent\x18\x01 \x01(\tR\x07\x63ontent\"5\n\x17\x45xtractKeywordsResponse\x12\x1a\n\x08keywords\x18\x01 \x03(\tR\x08keywords\"9\n\x1b\x45xtractKeywordsBatchRequest\x12\x1a\n\x08\x63ontents\x18\x01 \x03(\tR\x08\x63ontents\"x\n\x1c\x45xtractKeywordsBatchResponse\x12X\n\x0ekeywords_array\x18\x01 \x03(\x0b\x32\x31.noted.recommendations.v1.ExtractKeywordsResponseR\rkeywordsArray2\x97\x02\n\x11RecommendationAPI\x12x\n\x0f\x45xtractKeywords\x12\x30.noted.recommendations.v1.ExtractKeywordsRequest\x1a\x31.noted.recommendations.v1.ExtractKeywordsResponse\"\x00\x12\x87\x01\n\x14\x45xtractKeywordsBatch\x12\x35.noted.recommendations.v1.ExtractKeywordsBatchRequest\x1a\x36.noted.recommendations.v1.ExtractKeywordsBatchResponse\"\x00\x42\x1aZ\x18noted/recommendations/v1b\x06proto3')



_EXTRACTKEYWORDSREQUEST = DESCRIPTOR.message_types_by_name['ExtractKeywordsRequest']
_EXTRACTKEYWORDSRESPONSE = DESCRIPTOR.message_types_by_name['ExtractKeywordsResponse']
_EXTRACTKEYWORDSBATCHREQUEST = DESCRIPTOR.message_types_by_name['ExtractKeywordsBatchRequest']
_EXTRACTKEYWORDSBATCHRESPONSE = DESCRIPTOR.message_types_by_name['ExtractKeywordsBatchResponse']
ExtractKeywordsRequest = _reflection.GeneratedProtocolMessageType('ExtractKeywordsRequest', (_message.Message,), {
  'DESCRIPTOR' : _EXTRACTKEYWORDSREQUEST,
  '__module__' : 'noted.recommendations.v1.recommendations_pb2'
  # @@protoc_insertion_point(class_scope:noted.recommendations.v1.ExtractKeywordsRequest)
  })
_sym_db.RegisterMessage(ExtractKeywordsRequest)

ExtractKeywordsResponse = _reflection.GeneratedProtocolMessageType('ExtractKeywordsResponse', (_message.Message,), {
  'DESCRIPTOR' : _EXTRACTKEYWORDSRESPONSE,
  '__module__' : 'noted.recommendations.v1.recommendations_pb2'
  # @@protoc_insertion_point(class_scope:noted.recommendations.v1.ExtractKeywordsResponse)
  })
_sym_db.RegisterMessage(ExtractKeywordsResponse)

ExtractKeywordsBatchRequest = _reflection.GeneratedProtocolMessageType('ExtractKeywordsBatchRequest', (_message.Message,), {
  'DESCRIPTOR' : _EXTRACTKEYWORDSBATCHREQUEST,
  '__module__' : 'noted.recommendations.v1.recommendations_pb2'
  # @@protoc_insertion_point(class_scope:noted.recommendations.v1.ExtractKeywordsBatchRequest)
  })
_sym_db.RegisterMessage(ExtractKeywordsBatchRequest)

ExtractKeywordsBatchResponse = _reflection.GeneratedProtocolMessageType('ExtractKeywordsBatchResponse', (_message.Message,), {
  'DESCRIPTOR' : _EXTRACTKEYWORDSBATCHRESPONSE,
  '__module__' : 'noted.recommendations.v1.recommendations_pb2'
  # @@protoc_insertion_point(class_scope:noted.recommendations.v1.ExtractKeywordsBatchResponse)
  })
_sym_db.RegisterMessage(ExtractKeywordsBatchResponse)

_RECOMMENDATIONAPI = DESCRIPTOR.services_by_name['RecommendationAPI']
if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  DESCRIPTOR._serialized_options = b'Z\030noted/recommendations/v1'
  _EXTRACTKEYWORDSREQUEST._serialized_start=76
  _EXTRACTKEYWORDSREQUEST._serialized_end=126
  _EXTRACTKEYWORDSRESPONSE._serialized_start=128
  _EXTRACTKEYWORDSRESPONSE._serialized_end=181
  _EXTRACTKEYWORDSBATCHREQUEST._serialized_start=183
  _EXTRACTKEYWORDSBATCHREQUEST._serialized_end=240
  _EXTRACTKEYWORDSBATCHRESPONSE._serialized_start=242
  _EXTRACTKEYWORDSBATCHRESPONSE._serialized_end=362
  _RECOMMENDATIONAPI._serialized_start=365
  _RECOMMENDATIONAPI._serialized_end=644
# @@protoc_insertion_point(module_scope)
